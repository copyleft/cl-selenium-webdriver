This is cl-webdriver-client.info, produced by makeinfo version 6.7 from
cl-webdriver-client.weaved.texi.

INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* cl-webdriver-client: (cl-webdriver-client)Common Lisp Webdriver Client.
END-INFO-DIR-ENTRY


File: cl-webdriver-client.info,  Node: Top,  Next: Introduction,  Up: (dir)

Top
***

CL Webdriver Client is client library for WebDriver.

   WebDriver is a remote control interface that enables introspection
and control of user agents.  It provides a platform- and
language-neutral wire protocol as a way for out-of-process programs to
remotely instruct the behavior of web browsers.

   Provided is a set of interfaces to discover and manipulate DOM
elements in web documents and to control the behavior of a user agent.
It is primarily intended to allow web authors to write tests that
automate a user agent from a separate controlling process, but may also
be used in such a way as to allow in-browser scripts to control a —
possibly separate — browser.

   See W3C Webdriver spec (https://www.w3.org/TR/webdriver).

* Menu:

* Introduction::
* Usage::
* Installation::
* Utils::
* API::
* Index::


File: cl-webdriver-client.info,  Node: Introduction,  Next: Usage,  Prev: Top,  Up: Top

1 Introduction
**************

CL Webdriver Client is client library for WebDriver.

   WebDriver is a remote control interface that enables introspection
and control of user agents.  It provides a platform- and
language-neutral wire protocol as a way for out-of-process programs to
remotely instruct the behavior of web browsers.

   Provided is a set of interfaces to discover and manipulate DOM
elements in web documents and to control the behavior of a user agent.
It is primarily intended to allow web authors to write tests that
automate a user agent from a separate controlling process, but may also
be used in such a way as to allow in-browser scripts to control a —
possibly separate — browser.

   See W3C Webdriver spec (https://www.w3.org/TR/webdriver).


File: cl-webdriver-client.info,  Node: Usage,  Next: Installation,  Prev: Introduction,  Up: Top

2 Usage
*******

* Menu:

* Sessions::
* Capabilities::
* Actions::

     ;; see examples/*.lisp and t/*.lisp
     (in-package :cl-user)

     (eval-when (:compile-toplevel :load-toplevel :execute)
       (ql:quickload :cl-webdriver-client))

     (defpackage go-test
       (:use :cl :webdriver-client))

     (in-package :go-test)

     (defparameter *code* "
     package main
     import \"fmt\"

     func main() {
         fmt.Print(\"Hello WebDriver!\")
     }")

     (with-session ()
       (setf (url) "http://play.golang.org/?simple=1")
       (let ((elem (find-element "#code" :by :css-selector)))
         (element-clear elem)
         (element-send-keys elem *code*))
       (let ((btn (find-element "#run")))
         (element-click btn))

       (loop
          with div = (find-element "#output")
          for ouput = (element-text div)
          while (equal ouput "Waiting for remote server...")
          do (sleep 0.1)
          finally (print ouput)))


File: cl-webdriver-client.info,  Node: Sessions,  Next: Capabilities,  Up: Usage

2.1 Sessions
============

A session is equivalent to a single instantiation of a particular user
agent, including all its child browsers.  WebDriver gives each session a
unique session ID that can be used to differentiate one session from
another, allowing multiple user agents to be controlled from a single
HTTP server, and allowing sessions to be routed via a multiplexer (known
as an intermediary node).

   A WebDriver session represents the connection between a local end and
a specific remote end.

   A session is started when a New Session is invoked.  It is an error
to send any commands before starting a session, or to continue to send
commands after the session has been closed.  Maintaining session
continuity between commands to the remote end requires passing a session
ID.

   A session is torn down at some later point; either explicitly by
invoking Delete Session, or implicitly when Close Window is called at
the last remaining top-level browsing context.

   An intermediary node will maintain an associated session for each
active session.  This is the session on the upstream neighbor that is
created when the intermediary node executes the New Session command.
Closing a session on an intermediary node will also close the session of
the associated session.

   All commands, except New Session and Status, have an associated
current session, which is the session in which that command will run.


File: cl-webdriver-client.info,  Node: Capabilities,  Next: Actions,  Prev: Sessions,  Up: Usage

2.2 Capabilities
================

WebDriver capabilities are used to communicate the features supported by
a session.  A client may also use capabilities to define which features
it requires the driver to satisfy when creating a new session.

   When a WebDriver session is created it returns a set of capabilities
describing the negotiated, effective capabilities of the session.  Some
of the capabilities included in this set are standard and shared between
all browsers, but the set may also contain browser-specific capabilities
and these are always prefixed.  Capabilities negotiation

   Capabilities can be used to require a driver that supports a certain
subset of features.  This can be used to require certain browser
features, such as the ability to resize the window dimensions, but is
also used in distributed environments to select a particular browser
configuration from a matrix of choices.

   Selecting a particular web browser or platform only makes sense when
you use a remote WebDriver.  In this case the client makes contact with
WebDriver through one or more intermediary nodes which negotiates which
driver to return to you based on the capabilities it receives.

   The capabilities object is a selection mechanism that limits which
driver configurations the server will return.  If you request a Firefox
instance using browserName and Firefox is not installed on the remote,
or macOS from a remote that only supports Linux, you may be out of luck.
But occasionally you may not care which specific operating system or web
browser your session has: you just want a session that has some
capability.

   The selection process, or the capabilities negotiation, is done
through alwaysMatch and firstMatch.

   In _CL-WEBDRIVER-CLIENT_ capabilities are created using *note
MAKE-CAPABILITIES: WEBDRIVER-CLIENT:MAKE-CAPABILITIES function.  The key
argument :ALWAYS-MATCH should be the 'alwaysMatch' capabilities as an
association list.  The key argument :FIRST-MATCH are the 'firstMatch'
capabilities, a list of association lists.

   Also, capabilities are constructed from arguments in *note
MAKE-SESSION: WEBDRIVER-CLIENT:MAKE-SESSION function. and *note
WITH-SESSION: WEBDRIVER-CLIENT:WITH-SESSION macro.

* Menu:

* alwaysMatch::
* firstMatch::
* Combining alwaysMatch and firstMatch::
* List of capabilities::
* Vendor-specific capabilities::


File: cl-webdriver-client.info,  Node: alwaysMatch,  Next: firstMatch,  Up: Capabilities

2.2.1 alwaysMatch
-----------------

As the name suggests, capabilities described inside the alwaysMatch
capabilities object are features you require the session to have.  If
the server can not provide what features you require, it will fail.

   If for example you ask for Firefox version 62 on a system that only
has 60 installed, the session creation will fail:

     (make-capabilities
        :always-match '((:browser-name . "firefox")
                        (:browser-version . "60")))

   or:

     (with-session '(:always-match ((:browser-name . "firefox")
                                    (:browser-version . "60")))
        ... )


File: cl-webdriver-client.info,  Node: firstMatch,  Next: Combining alwaysMatch and firstMatch,  Prev: alwaysMatch,  Up: Capabilities

2.2.2 firstMatch
----------------

The firstMatch field accepts an array of capabilities objects which will
be matched in turn until one matches what the server can provide, or it
will fail.

   This can be useful when you want a driver that runs on macOS or
Linux, but not Windows:

     (make-capabilities
       :first-match (list
           '((:platform-name . "macos"))
           '((:platform-name . "linux"))))


File: cl-webdriver-client.info,  Node: Combining alwaysMatch and firstMatch,  Next: List of capabilities,  Prev: firstMatch,  Up: Capabilities

2.2.3 Combining alwaysMatch and firstMatch
------------------------------------------

firstMatch can of course be combined with alwaysMatch to narrow down the
selection.  If for example you a driver that runs on macOS or Linux but
it has to be Firefox:

     (make-capabilities
         :always-match '((:browser-name . "firefox"))
         :first-match (list
           '((:platform-name . "macos"))
           '((:platform-name . "linux"))))

   The previous example is exactly equivalent to putting the Firefox
requirement in each firstMatch arm:

     (make-capabilities
         :first-match (list
             '((:browser-name . "firefox") (:platform-name . "macos"))
             '((:browser-name . "firefox") (:platform-name . "linux"))))

   Which you choose of the two preceding examples is not important, but
it can matter when pass along browser configuration.  To avoid
unnecessarily repeating data, such as profiles, it is advisable to make
use of alwaysMatch so that this data is only transmitted across the wire
once:

     (make-capabilities
        :always-match `((:browser-name . "firefox")
                        ,(firefox-capabilities
                             :profile "<base64 encoded profile>"
                             :args #("--headless")
                             :prefs '(("dom.ipc.processCount" . 8))
                             :log '((:level . "trace"))))
        :first-match (list
            '((:platform-name . "macos"))
            '((:platform-name . "linux"))))


File: cl-webdriver-client.info,  Node: List of capabilities,  Next: Vendor-specific capabilities,  Prev: Combining alwaysMatch and firstMatch,  Up: Capabilities

2.2.4 List of capabilities
--------------------------

   * _:browser-name_ - a string.  The name of the browser to use.  e.g.
     "chrome", "firefox".
   * _:browser-version_ - a string.  The browser version required.
   * _:platform-name_ - a string.  Identifies the operating system of
     the endpoint node.  e.g.  'Linux', 'Windows'.
   * _:accept-insecure-certs_ - a boolean.  The acceptInsecureCerts
     capability communicates whether expired or invalid TLS certificates
     are checked when navigating.  If the capability is false, an
     insecure certificate error will be returned as navigation
     encounters domains with certificate problems.  Otherwise,
     self-signed or otherwise invalid certificates will be implicitly
     trusted by the browser on navigation.  The capability has effect
     for the lifetime of the session.
   * _:page-load-strategy_ - a string.
   * _:proxy_ - object.  Defines the current session’s proxy
     configuration
     (https://www.w3.org/TR/webdriver1/#dfn-proxy-configuration).
   * _:set-window-rect_ - boolean.  Indicates whether the remote end
     supports all of the commands in Resizing and Positioning Windows
     (https://www.w3.org/TR/webdriver1/#resizing-and-positioning-windows).
   * _:timeouts_ - object.  Describes the timeouts
     (https://www.w3.org/TR/webdriver1/#dfn-timeouts) imposed on certain
     session operations.
   * _:unhandled-prompt-behaviour_ - string.  Describes the current
     session’s user prompt handler.

   Reference: <https://www.w3.org/TR/webdriver1/#capabilities>.


File: cl-webdriver-client.info,  Node: Vendor-specific capabilities,  Prev: List of capabilities,  Up: Capabilities

2.2.5 Vendor-specific capabilities
----------------------------------

In addition to the standard capabilities WebDriver allows third-parties
to extend the set of capabilities to match their needs.  Browser vendors
and suppliers of drivers typically use extension capabilities to provide
configuration to the browser, but they can also be used by
intermediaries for arbitrary blobs of information.

   You can use *note CHROME-CAPABILITIES:
WEBDRIVER-CLIENT:CHROME-CAPABILITIES function. and *note
FIREFOX-CAPABILITIES: WEBDRIVER-CLIENT:FIREFOX-CAPABILITIES function.
for these.


File: cl-webdriver-client.info,  Node: Actions,  Prev: Capabilities,  Up: Usage

2.3 Actions
===========

The Actions API provides a low-level interface for providing virtualised
device input to the web browser.  Conceptually, the Actions commands
divide time into a series of ticks.  The local end sends a series of
actions which correspond to the change in state, if any, of each input
device during each tick.  For example, pressing a key is represented by
an action sequence consisting of a single key input device and two
ticks, the first containing a keyDown action, and the second a keyUp
action, whereas a pinch-zoom input is represented by an action sequence
consisting of three ticks and two pointer input devices of type touch,
each performing a sequence of actions pointerDown, followed by
pointerMove, and then pointerUp.

   See <https://www.w3.org/TR/webdriver/#actions> for the whole
explanation.

   To perform actions in _cl-webdriver-client_ use *note
PERFORM-ACTIONS: WEBDRIVER-CLIENT:PERFORM-ACTIONS function.  That
function implements a little language, with the following syntax:

Syntax:
-------

actions ::= ({actions-input-source}*)
actions-input-source ::= (input-source-type {action}*)
input-source-type ::= :none | :pointer | :mouse | :pen | :touch | :key
action ::= pause | pointer-move | pointer-down | pointer-up | key-down | key-up
pause ::= (:pause duration)
pointer-move ::= (:pointer-move x y)
pointer-down ::= (:pointer-down button-number)
pointer-up ::= (:pointer-up button-number)
key-down ::= (:key-down key)
key-up ::= (:key-up key)

Arguments and values:
---------------------

   * _actions_--a list of actions-input-sources.  One list for each type
     of input source that wants to be used.
   * _actions-input-source_--a list.  Specifies the list of actions to
     perform for a particular input source.
   * _duration_--an integer.  The time to pause in milliseconds.
   * _key_--a string.  A string with the character (e.g.  "a").  Use
     *note KEY: WEBDRIVER-CLIENT:KEY function. for entering special
     characters.
   * _button-number_--an integer greater than or equal to 0.
   * _x_--an integer.  Horizontal screen coordinate.
   * _y_--an integer.  Vertical screen coordinate.

Examples:
---------

     (perform-actions `((:pen
     		     (:pointer-move 22 33)
     		     (:pause 2000)
     		     (:pointer-move 23 54))))


File: cl-webdriver-client.info,  Node: Installation,  Next: Utils,  Prev: Usage,  Up: Top

3 Installation
**************

     git clone https://github.com/copyleft/cl-webdriver-client ~/quicklisp/local-projects/
     (ql:quickload :cl-webdriver-client)

   You need a running instance of selenium-server-standalone.

   [Download](http://www.seleniumhq.org/download/) it and run:

     curl -L0 https://goo.gl/SP94ZB -o selenium-server-standalone.jar
     java -jar selenium-server-standalone.jar


File: cl-webdriver-client.info,  Node: Utils,  Next: API,  Prev: Installation,  Up: Top

4 Utils
*******

There is a ':webdriver-client-utils' package which should reduce
boilerplate.  For example:

     (defpackage my-test
       (:use :cl :webdriver-client)
       (:import-from :webdriver-client-utils
                     :send-keys
                     :click
                     :wait-for
                     :classlist))

     (in-package :my-test)

     (with-session ()
       (setf (url) "http://google.com")
       (send-keys "cl-webdriver-client")
       (click "[name=btnK]")
       (wait-for "#resultStats"))


* Menu:

* Interactive session::
* Utils API conventions::
* Waiting for the reaction::
* Running tests::


File: cl-webdriver-client.info,  Node: Interactive session,  Next: Utils API conventions,  Up: Utils

4.1 Interactive session
=======================

You can just start the session and control it from your repl:

     (in-package :my-test)

     (start-interactive-session)

     (setf (url) "http://google.com")
     (send-keys "cl-webdriver-client")
     (send-keys (key :enter))
     (classlist "#slim_appbar") ; prints ("ab_tnav_wrp")

     (stop-interactive-session)


File: cl-webdriver-client.info,  Node: Utils API conventions,  Next: Waiting for the reaction,  Prev: Interactive session,  Up: Utils

4.2 Utils API conventions
=========================

If utility function needs an element to work on it defaults to
'(active-element)'.
     (click) ; click on the current active element.

   You can also pass a css selector as a last parameter.

     (print (id "#submit")) ; print id the of matched element

     (assert (= (first (classlist "div")) "first-div-ever"))

   To change default element you can:

     (setf webdriver-client-utils:*default-element-func* (lambda () (find-element "input[type=submit]"))


File: cl-webdriver-client.info,  Node: Waiting for the reaction,  Next: Running tests,  Prev: Utils API conventions,  Up: Utils

4.3 Waiting for the reaction
============================

Often you need to wait for some action to be done.  For example if you
do a '(click)' on the button to load search results, you need to wait
them to load.

     (wait-for ".search-result" :timeout 10) ; wait 10 seconds

   Timeout defaults to 30 seconds.  You can globally change it:
     (setf webdriver-client-utils:*timeout* 3)


File: cl-webdriver-client.info,  Node: Running tests,  Prev: Waiting for the reaction,  Up: Utils

4.4 Running tests
=================

REPL
====

     (ql:quickload '(:cl-selenium :prove))
     (setf prove:*enable-colors* nil)
     (prove:run :cl-webdriver-client-test)

Shell
=====

     sh
     ./test.sh


File: cl-webdriver-client.info,  Node: API,  Next: Index,  Prev: Utils,  Up: Top

5 API
*****

* Menu:

* WEBDRIVER-CLIENT package::
* WEBDRIVER-CLIENT-UTILS package::


File: cl-webdriver-client.info,  Node: WEBDRIVER-CLIENT package,  Next: WEBDRIVER-CLIENT-UTILS package,  Up: API

5.1 WEBDRIVER-CLIENT package
============================

 -- PACKAGE: WEBDRIVER-CLIENT

     This package exports functions for working with Selenium WebDriver.

     For documentation see:
     - <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol>
     - <https://www.w3.org/TR/webdriver1>

External definitions
====================

Uncategorized
-------------

 -- WEBDRIVER-CLIENT: LOGS (type &key (session *session*))

     Return the logs of a particular TYPE.
     See: *note LOG-TYPES: WEBDRIVER-CLIENT:LOG-TYPES function.

 -- WEBDRIVER-CLIENT: NO-SUCH-ELEMENT-ERROR

     Error signaled when no such element is found.

     Class precedence list: 'no-such-element-error, find-error, error,
     serious-condition, condition, t'

 -- WEBDRIVER-CLIENT: MOUSE-MOVE-TO (x y &key element (session
          *session*))

     Move the mouse by an offset of the specificed ELEMENT.  If no
     ELEMENT is specified, the move is relative to the current mouse
     cursor.  If an ELEMENT is provided but no offset, the mouse will be
     moved to the center of the ELEMENT.  If the ELEMENT is not visible,
     it will be scrolled into view.

     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidmoveto>

 -- WEBDRIVER-CLIENT: ELEMENT-ID (sb-pcl::object)

 -- WEBDRIVER-CLIENT: MOUSE-CLICK (button &key (session *session*))

     Click any mouse BUTTON (at the coordinates set by the last moveto
     command).  Note that calling this command after calling buttondown
     and before calling BUTTON up (or any out-of-order interactions
     sequence) will yield undefined behaviour).

     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidclick>

 -- WEBDRIVER-CLIENT: LOG-TYPES (&key (session *session*))

     Return the types of logs supported by the WebDriver.

     - browser: Javascript console logs from the browser.
     - client: Logs from the client side implementation of the WebDriver
     protocol (e.g.  the Java bindings).
     - driver: Logs from the internals of the driver (e.g.
     FirefoxDriver internals).
     - performance: Logs relating to the performance characteristics of
     the page under test (e.g.  resource load timings).
     - server: Logs from within the selenium server.

     See: <https://github.com/SeleniumHQ/selenium/wiki/Logging> .

 -- WEBDRIVER-CLIENT: MAKE-CAPABILITIES (&key ((:always-match
          #:always-match) nil) ((:first-match #:first-match) nil))

 -- WEBDRIVER-CLIENT: WEBDRIVER-STATUS nil

     Get WebDriver status information

Navigation
----------

 -- WEBDRIVER-CLIENT: BACK (&key (session *session*))

     This command causes the browser to traverse one step backward in
     the joint SESSION history of the current top-level browsing
     context.  This is equivalent to pressing the back button in the
     browser chrome or invoking window.history.back.

     Category: Navigation
     See: <https://www.w3.org/TR/webdriver1/#dfn-back> .

 -- WEBDRIVER-CLIENT: PAGE-SOURCE (&key (session *session*))

     Returns a string serialization of the DOM of the current browsing
     context active document.

     Category: Navigation
     See: <https://www.w3.org/TR/webdriver1/#get-page-source>

 -- WEBDRIVER-CLIENT: PAGE-TITLE (&key (session *session*))

     This command returns the document title of the current top-level
     browsing context, equivalent to calling document.title.

     Category: Navigation
     See: <https://www.w3.org/TR/webdriver2/#get-title> .

 -- WEBDRIVER-CLIENT: REFRESH (&key (session *session*))

     Refresh the current page.

     Category: Navigation

 -- WEBDRIVER-CLIENT: SWITCH-TO-FRAME (id &key (session *session*))

     Change focus to another frame on the page.  If the frame ID is
     null, the server
     should switch to the page's default content.

     In the context of a web browser, a frame is a part of a web page or
     browser window which displays content independent of its container,
     with the ability to load content independently.

     Category: Navigation
     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidframe>
     .
     See: <https://en.wikipedia.org/wiki/Frame_(World_Wide_Web)> .

 -- WEBDRIVER-CLIENT: URL (&key (session *session*))

     Get the current url in SESSION.

     Category: Navigation
     See: <https://www.w3.org/TR/webdriver1/#dfn-get-current-url> .

Session
-------

 -- WEBDRIVER-CLIENT: START-INTERACTIVE-SESSION (&optional capabilities)

     Start an interactive session.  Use this to interact with Selenium
     driver from a REPL.

     Category: Session
     See: *note MAKE-SESSION: WEBDRIVER-CLIENT:MAKE-SESSION function.

 -- WEBDRIVER-CLIENT: WITH-SESSION (capabilities &body body)

     Execute BODY inside a Selenium session.

     Category: Session
     See: *note MAKE-SESSION: WEBDRIVER-CLIENT:MAKE-SESSION function.

 -- WEBDRIVER-CLIENT: USE-SESSION (session)

     Make SESSION the current SESSION.

     Category: SESSION

 -- WEBDRIVER-CLIENT: STOP-INTERACTIVE-SESSION nil

     Stop an interactive session.

     Category: Session

 -- WEBDRIVER-CLIENT: MAKE-SESSION (capabilities)

     Creates a new WebDriver session with the endpoint node.  If the
     creation fails, a session not created error is returned.

     CAPABILITIES are the CAPABILITIES to negotate for the new session.
     If it is NIL, then *note *DEFAULT-CAPABILITIES*:
     WEBDRIVER-CLIENT:*DEFAULT-CAPABILITIES* variable. are used.  If it
     is a list, then it is use as parameters for *note
     MAKE-CAPABILITIES: WEBDRIVER-CLIENT:MAKE-CAPABILITIES function. to
     build a new CAPABILITIES object.  Otherwise, it is assumed to be a
     CAPABILITIES object.

     Category: Session
     See: <https://www.w3.org/TR/webdriver1/#new-session> .
     See: <https://www.w3.org/TR/webdriver1/#>CAPABILITIES .

 -- WEBDRIVER-CLIENT: DELETE-SESSION (session)

     Delete the WebDriver SESSION.

     Category: SESSION

Screen capture
--------------

 -- WEBDRIVER-CLIENT: SCREENSHOT (&key (session *session*))

     Screenshots are a mechanism for providing additional visual
     diagnostic information.  They work by dumping a snapshot of the
     initial viewport’s framebuffer as a lossless PNG image.  It is
     returned to the local end as a Base64 encoded string.

     Category: Screen capture
     See: <https://www.w3.org/TR/webdriver2/#screen-capture> .

 -- WEBDRIVER-CLIENT: ELEMENT-SCREENSHOT (element &key (session
          *session*))

     The Take ELEMENT Screenshot command takes a screenshot of the
     visible region encompassed by the bounding rectangle of an ELEMENT.
     If given a parameter argument scroll that evaluates to false, the
     ELEMENT will not be scrolled into view.

     Category: Screen capture
     See: <https://www.w3.org/TR/webdriver1/#take-element-screenshot> .

Actions
-------

 -- WEBDRIVER-CLIENT: KEY (key)

     Returns a string with KEY's codepoint.

     Category: Actions
     See: <https://www.w3.org/TR/webdriver/#keyboard-actions>

 -- WEBDRIVER-CLIENT: PERFORM-ACTIONS (actions &optional (session
          *session*))

     The ACTIONS API provides a low-level interface for providing
     virtualised device input to the web browser.
     Conceptually, the ACTIONS commands divide time into a series of
     ticks.  The local end sends a series of ACTIONS which correspond to
     the change in state, if any, of each input device during each tick.
     For example, pressing a key is represented by an action sequence
     consisting of a single key input device and two ticks, the first
     containing a keyDown action, and the second a keyUp action, whereas
     a pinch-zoom input is represented by an action sequence consisting
     of three ticks and two pointer input devices of type touch, each
     performing a sequence of ACTIONS pointerDown, followed by
     pointerMove, and then pointerUp.

     Category: ACTIONS
     See: <https://www.w3.org/TR/webdriver/#>ACTIONS

User prompts
------------

 -- WEBDRIVER-CLIENT: ACCEPT-ALERT (&key (session *session*))

     Accept Alert.

     Category: User prompts
     See: <https://www.w3.org/TR/webdriver1/#dfn-accept-alert>

 -- WEBDRIVER-CLIENT: ALERT-TEXT (&key (session *session*))

     Get Alert Text.

     Category: User prompts
     See: <https://www.w3.org/TR/webdriver1/#get-alert-text>

 -- WEBDRIVER-CLIENT: DISMISS-ALERT (&key (session *session*))

     The Dismiss Alert command dismisses a simple dialog if present.  A
     request to dismiss an alert user prompt, which may not necessarily
     have a dismiss button, has the same effect as accepting it.

     Category: User prompts
     See: <https://www.w3.org/TR/webdriver1/#dismiss-alert>

Document handling
-----------------

 -- WEBDRIVER-CLIENT: EXECUTE-SCRIPT (script args &key (session
          *session*))

     Inject a snippet of JavaScript into the page for execution in the
     context of the currently selected frame.  The executed SCRIPT is
     assumed to be synchronous and the result of evaluating the SCRIPT
     is returned to the client.

     The SCRIPT argument defines the SCRIPT to execute in the form of a
     function body.  The value returned by that function will be
     returned to the client.  The function will be invoked with the
     provided ARGS array and the values may be accessed via the
     arguments object in the order specified.

     Arguments may be any JSON-primitive, array, or JSON object.  JSON
     objects that define a WebElement reference will be converted to the
     corresponding DOM element.  Likewise, any WebElements in the SCRIPT
     result will be returned to the client as WebElement JSON objects.

     Category: Document handling
     See: <https://www.w3.org/TR/webdriver1/#executing-script> .

Capabilities
------------

 -- WEBDRIVER-CLIENT: MERGE-CAPABILITIES (cap1 cap2)

     Merge two capabilities

     Category: Capabilities

 -- WEBDRIVER-CLIENT: CHROME-CAPABILITIES (&rest options)

     Specifies Chrome specific capabilities.

     Category: Capabilities
     <https://chromedriver.chromium.org/capabilities#h.p_ID_102>

 -- WEBDRIVER-CLIENT: FIREFOX-CAPABILITIES (&rest options)

     Specify capabilities for Firefox browser.

     Example usage:

     (firefox-capabilities :ARGS #("-headless"))

     Category: Capabilities
     See:
     <https://developer.mozilla.org/en-US/docs/Web/WebDriver/Capabilities/firefoxOptions>

 -- WEBDRIVER-CLIENT: *DEFAULT-CAPABILITIES*

     The default capabilities.

     Category: Capabilities

Cookies
-------

 -- WEBDRIVER-CLIENT: DELETE-ALL-COOKIES (&key (session *session*))

     Deletes all cookies

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#delete-all-cookies>

 -- WEBDRIVER-CLIENT: MAKE-COOKIE (name value &key path domain secure
          expiry)

     Create a cookie object.

     Category: Cookies

 -- WEBDRIVER-CLIENT: DELETE-COOKIE (cookie-name &key (session
          *session*))

     Delete the cookie with name COOKIE-NAME.

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#delete-cookie>

 -- WEBDRIVER-CLIENT: FIND-COOKIE (cookie-name &key (session *session*))

     Retrieve the cookie with name COOKIE-NAME.

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#get-named-cookie>

 -- WEBDRIVER-CLIENT: COOKIE

     A cookie is described in [RFC6265] by a name-value pair holding the
     cookie’s data, followed by zero or more attribute-value pairs
     describing its characteristics.

     Category: Cookies

     Class precedence list: 'cookie, standard-object, t'

     Slots:
        * 'name' -- initarg: ':name'

          The name of the cookie
        * 'value' -- initarg: ':value'

          The cookie value
        * 'path' -- initarg: ':path'

          The cookie path.  Defaults to '/' if omitted when adding a
          cookie.
        * 'domain' -- initarg: ':domain'

          The domain the cookie is visible to.  Defaults to the current
          browsing context’s active document’s URL domain if omitted
          when adding a cookie.
        * 'secure' -- initarg: ':secure'

          Whether the cookie is a secure cookie.  Defaults to false if
          omitted when adding a cookie.
        * 'http-only' -- initarg: ':http-only'

          Whether the cookie is an HTTP only cookie.  Defaults to false
          if omitted when adding a cookie.
        * 'expiry' -- initarg: ':expiry'

          When the cookie expires, specified in seconds since Unix
          Epoch.  Must not be set if omitted when adding a cookie.

 -- WEBDRIVER-CLIENT: COOKIE (&key (session *session*))

     Retrieve all cookies visible to the current page.

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#get-all-cookies> .
     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidcookie>
     .

Elements
--------

 -- WEBDRIVER-CLIENT: ACTIVE-ELEMENT (&key (session *session*))

     Return the active element of the current browsing context’s
     document.
     The active element is the Element within the DOM that currently has
     focus.
     If there's no active element, an error is signaled.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver2/#get-active-element.>
     See:
     <https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement.>

 -- WEBDRIVER-CLIENT: FIND-ELEMENTS (value &key (by :css-selector)
          (session *session*))

     Find elements that match VALUE using location strategy in BY.

     Category: Elements
     See *note FIND-ELEMENT: WEBDRIVER-CLIENT:FIND-ELEMENT function.
     See <https://www.w3.org/TR/webdriver1/#find-elements> .

 -- WEBDRIVER-CLIENT: ELEMENT-DISPLAYED (element &key (session
          *session*))

     Returns if ELEMENT is visible.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#element-displayedness> .

 -- WEBDRIVER-CLIENT: ELEMENT-ATTRIBUTE (element name &key (session
          *session*))

     Return the ELEMENT's attribute named NAME.

     Category: Elements

 -- WEBDRIVER-CLIENT: ELEMENT-ENABLED (element &key (session *session*))

     Returns if ELEMENT is enabled.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#is-element-enabled> .

 -- WEBDRIVER-CLIENT: ELEMENT-RECT (element &key (session *session*))



     The Get ELEMENT Rect command returns the dimensions and coordinates
     of the given web ELEMENT.  The returned value is a dictionary with
     the following members:

     x
     X axis position of the top-left corner of the web ELEMENT relative
     to the current browsing context’s document ELEMENT in CSS pixels.
     y
     Y axis position of the top-left corner of the web ELEMENT relative
     to the current browsing context’s document ELEMENT in CSS pixels.
     height
     Height of the web ELEMENT’s bounding rectangle in CSS pixels.
     width
     Width of the web ELEMENT’s bounding rectangle in CSS pixels.

     Category: Elements

 -- WEBDRIVER-CLIENT: ELEMENT-TEXT (element &key (session *session*))

     The Get ELEMENT Text command intends to return an ELEMENT’s text
     “as rendered”.  An ELEMENT’s rendered text is also used for
     locating a elements by their link text and partial link text.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#get-element-text> .

 -- WEBDRIVER-CLIENT: ELEMENT-TAGNAME (element &key (session *session*))

     Return the ELEMENT's tag name.

     Category: Elements

 -- WEBDRIVER-CLIENT: FIND-ELEMENT (value &key (by :css-selector)
          (session *session*))

     The Find Element command is used to find an element in the current
     browsing context that can be used as the web element context for
     future element-centric commands.

     For example, consider this pseudo code which retrieves an element
     with the #toremove ID and uses this as the argument for a script it
     injects to remove it from the HTML document:

     let body *note =: COMMON-LISP:= function.
     SESSION.find.css("#toremove");
     SESSION.execute("arguments[0].remove()", [body]);

     The BY parameter represents the element location strategy.

     It can be one of:
     - :ID : Finds element BY id.
     - :CLASS-NAME : Finds element BY class name.
     - :CSS-SELECTOR : Returns element that matches css selector.
     - :LINK-TEXT : Returns element that matches <a> element text.
     - :PARTIAL-LINK-TEXT: Returns element that matches <a> element text
     partially.
     - :TAG-NAME: Returns element that matches tag name.
     - :XPATH: Returns element that matches the XPath expression.

     If result is empty, a *note HANDLE-FIND-ERROR:
     WEBDRIVER-CLIENT:HANDLE-FIND-ERROR function. is signaled.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#dfn-find-element> .

Element interaction
-------------------

 -- WEBDRIVER-CLIENT: ELEMENT-CLEAR (element &key (session *session*))

     Clear the contents of ELEMENT (for example, a form field ELEMENT).

     Category: ELEMENT interaction
     See: <https://www.w3.org/TR/webdriver1/#dfn-element-clear.>

 -- WEBDRIVER-CLIENT: ELEMENT-CLICK (element &key (session *session*))

     The ELEMENT Click command scrolls into view the ELEMENT if it is
     not already pointer-interactable, and clicks its in-view center
     point.

     If the ELEMENT’s center point is obscured by another ELEMENT, an
     ELEMENT click intercepted error is returned.  If the ELEMENT is
     outside the viewport, an ELEMENT not interactable error is
     returned.

     Category: ELEMENT interaction
     See: <https://www.w3.org/TR/webdriver1/#element-click> .

 -- WEBDRIVER-CLIENT: ELEMENT-SEND-KEYS (element keys &key (session
          *session*))

     The ELEMENT Send KEYS command scrolls into view the form control
     ELEMENT and then sends the provided KEYS to the ELEMENT.  In case
     the ELEMENT is not keyboard-interactable, an ELEMENT not
     interactable error is returned.

     KEYS should be a string.

     Category: ELEMENT interaction
     See: <https://www.w3.org/TR/webdriver1/#element-send-keys> .

Windows
-------

 -- WEBDRIVER-CLIENT: CLOSE-CURRENT-WINDOW (&key (session *session*))

     Close the current window.

     Category: Windows


File: cl-webdriver-client.info,  Node: WEBDRIVER-CLIENT-UTILS package,  Prev: WEBDRIVER-CLIENT package,  Up: API

5.2 WEBDRIVER-CLIENT-UTILS package
==================================

 -- PACKAGE: WEBDRIVER-CLIENT-UTILS

     Package with the purpose of reducing boilerplate.

     The exported definitions work with an implicit element.  The
     default implicit element is the current active element.  So, it is
     not neccesary to pass the element you are working with around most
     of the time.

External definitions
====================

Variables
---------

 -- WEBDRIVER-CLIENT-UTILS: *TIMEOUT*

     Default timeout value to use in selenium-utils functions.

 -- WEBDRIVER-CLIENT-UTILS: *DEFAULT-ELEMENT-FUNC*

     Function used to get the 'default element' by selenium-utils
     functions.
     It is *note ACTIVE-ELEMENT: WEBDRIVER-CLIENT:ACTIVE-ELEMENT
     function. function by default.

Functions
---------

 -- WEBDRIVER-CLIENT-UTILS: ID (&optional selector)

     Get active element id.

 -- WEBDRIVER-CLIENT-UTILS: GET-COOKIE (cookie name)

     Get value of COOKIE at NAME.

 -- WEBDRIVER-CLIENT-UTILS: FIND-ELEM (selector &key (by :css-selector))

     Find element BY SELECTOR.  Returns NIL if the element is not found.

 -- WEBDRIVER-CLIENT-UTILS: WAIT-FOR (selector &key (timeout *timeout*))

     Wait for an element that matches SELECTOR to appear on the screen.
     TIMEOUT indicates how much time to wait (default is *TIMEOUT*).

 -- WEBDRIVER-CLIENT-UTILS: CLASSNAME (&optional selector)

     Get active element classname.

 -- WEBDRIVER-CLIENT-UTILS: TEXT (&optional selector)

     Get active element's text.

 -- WEBDRIVER-CLIENT-UTILS: SEND-KEY (key &optional selector)

     Send a KEY to active element.

 -- WEBDRIVER-CLIENT-UTILS: CLASSLIST (&optional selector)

     Get active element class list.

 -- WEBDRIVER-CLIENT-UTILS: ATTR (name &optional selector)

     Get acttive element attribute.

 -- WEBDRIVER-CLIENT-UTILS: SEND-KEYS (keys &optional selector)

     Send KEYS to active element.

 -- WEBDRIVER-CLIENT-UTILS: ELEM (&optional selector)

     If SELECTOR is given, wait for an element that matches the SELECTOR
     to appear.
     Otherwise, call *note *DEFAULT-ELEMENT-FUNC*:
     WEBDRIVER-CLIENT-UTILS:*DEFAULT-ELEMENT-FUNC* variable. (the active
     element is returned by default).

 -- WEBDRIVER-CLIENT-UTILS: CLICK (&optional selector)

     Click on active element.


File: cl-webdriver-client.info,  Node: Index,  Prev: API,  Up: Top

6 Index
*******

 [index ]
* Menu:

* cl-webdriver-client:                   Top.                   (line 6)
* cl-webdriver-client <1>:               Top.                   (line 6)

 [index ]
* Menu:

* *DEFAULT-CAPABILITIES*:                WEBDRIVER-CLIENT package.
                                                              (line 321)
* *DEFAULT-ELEMENT-FUNC*:                WEBDRIVER-CLIENT-UTILS package.
                                                              (line  25)
* *TIMEOUT*:                             WEBDRIVER-CLIENT-UTILS package.
                                                              (line  21)
* WEBDRIVER-CLIENT-UTILS:*DEFAULT-ELEMENT-FUNC*: WEBDRIVER-CLIENT-UTILS package.
                                                              (line  25)
* WEBDRIVER-CLIENT-UTILS:*TIMEOUT*:      WEBDRIVER-CLIENT-UTILS package.
                                                              (line  21)
* WEBDRIVER-CLIENT:*DEFAULT-CAPABILITIES*: WEBDRIVER-CLIENT package.
                                                              (line 321)

 [index ]
* Menu:

* ACCEPT-ALERT:                          WEBDRIVER-CLIENT package.
                                                              (line 245)
* ACTIVE-ELEMENT:                        WEBDRIVER-CLIENT package.
                                                              (line 411)
* ALERT-TEXT:                            WEBDRIVER-CLIENT package.
                                                              (line 252)
* ATTR:                                  WEBDRIVER-CLIENT-UTILS package.
                                                              (line  68)
* BACK:                                  WEBDRIVER-CLIENT package.
                                                              (line  81)
* CHROME-CAPABILITIES:                   WEBDRIVER-CLIENT package.
                                                              (line 302)
* CLASSLIST:                             WEBDRIVER-CLIENT-UTILS package.
                                                              (line  64)
* CLASSNAME:                             WEBDRIVER-CLIENT-UTILS package.
                                                              (line  52)
* CLICK:                                 WEBDRIVER-CLIENT-UTILS package.
                                                              (line  84)
* CLOSE-CURRENT-WINDOW:                  WEBDRIVER-CLIENT package.
                                                              (line 564)
* COOKIE:                                WEBDRIVER-CLIENT package.
                                                              (line 398)
* DELETE-ALL-COOKIES:                    WEBDRIVER-CLIENT package.
                                                              (line 330)
* DELETE-COOKIE:                         WEBDRIVER-CLIENT package.
                                                              (line 344)
* DELETE-SESSION:                        WEBDRIVER-CLIENT package.
                                                              (line 183)
* DISMISS-ALERT:                         WEBDRIVER-CLIENT package.
                                                              (line 259)
* ELEM:                                  WEBDRIVER-CLIENT-UTILS package.
                                                              (line  76)
* ELEMENT-ATTRIBUTE:                     WEBDRIVER-CLIENT package.
                                                              (line 441)
* ELEMENT-CLEAR:                         WEBDRIVER-CLIENT package.
                                                              (line 527)
* ELEMENT-CLICK:                         WEBDRIVER-CLIENT package.
                                                              (line 534)
* ELEMENT-DISPLAYED:                     WEBDRIVER-CLIENT package.
                                                              (line 433)
* ELEMENT-ENABLED:                       WEBDRIVER-CLIENT package.
                                                              (line 448)
* ELEMENT-ID:                            WEBDRIVER-CLIENT package.
                                                              (line  44)
* ELEMENT-RECT:                          WEBDRIVER-CLIENT package.
                                                              (line 455)
* ELEMENT-SCREENSHOT:                    WEBDRIVER-CLIENT package.
                                                              (line 202)
* ELEMENT-SEND-KEYS:                     WEBDRIVER-CLIENT package.
                                                              (line 548)
* ELEMENT-TAGNAME:                       WEBDRIVER-CLIENT package.
                                                              (line 485)
* ELEMENT-TEXT:                          WEBDRIVER-CLIENT package.
                                                              (line 476)
* EXECUTE-SCRIPT:                        WEBDRIVER-CLIENT package.
                                                              (line 271)
* FIND-COOKIE:                           WEBDRIVER-CLIENT package.
                                                              (line 352)
* FIND-ELEM:                             WEBDRIVER-CLIENT-UTILS package.
                                                              (line  43)
* FIND-ELEMENT:                          WEBDRIVER-CLIENT package.
                                                              (line 491)
* FIND-ELEMENTS:                         WEBDRIVER-CLIENT package.
                                                              (line 424)
* FIREFOX-CAPABILITIES:                  WEBDRIVER-CLIENT package.
                                                              (line 309)
* GET-COOKIE:                            WEBDRIVER-CLIENT-UTILS package.
                                                              (line  39)
* ID:                                    WEBDRIVER-CLIENT-UTILS package.
                                                              (line  35)
* KEY:                                   WEBDRIVER-CLIENT package.
                                                              (line 216)
* LOG-TYPES:                             WEBDRIVER-CLIENT package.
                                                              (line  56)
* LOGS:                                  WEBDRIVER-CLIENT package.
                                                              (line  20)
* MAKE-CAPABILITIES:                     WEBDRIVER-CLIENT package.
                                                              (line  71)
* MAKE-COOKIE:                           WEBDRIVER-CLIENT package.
                                                              (line 337)
* MAKE-SESSION:                          WEBDRIVER-CLIENT package.
                                                              (line 166)
* MERGE-CAPABILITIES:                    WEBDRIVER-CLIENT package.
                                                              (line 296)
* MOUSE-CLICK:                           WEBDRIVER-CLIENT package.
                                                              (line  46)
* MOUSE-MOVE-TO:                         WEBDRIVER-CLIENT package.
                                                              (line  32)
* PAGE-SOURCE:                           WEBDRIVER-CLIENT package.
                                                              (line  91)
* PAGE-TITLE:                            WEBDRIVER-CLIENT package.
                                                              (line  99)
* PERFORM-ACTIONS:                       WEBDRIVER-CLIENT package.
                                                              (line 223)
* REFRESH:                               WEBDRIVER-CLIENT package.
                                                              (line 107)
* SCREENSHOT:                            WEBDRIVER-CLIENT package.
                                                              (line 192)
* SEND-KEY:                              WEBDRIVER-CLIENT-UTILS package.
                                                              (line  60)
* SEND-KEYS:                             WEBDRIVER-CLIENT-UTILS package.
                                                              (line  72)
* START-INTERACTIVE-SESSION:             WEBDRIVER-CLIENT package.
                                                              (line 139)
* STOP-INTERACTIVE-SESSION:              WEBDRIVER-CLIENT package.
                                                              (line 160)
* SWITCH-TO-FRAME:                       WEBDRIVER-CLIENT package.
                                                              (line 113)
* TEXT:                                  WEBDRIVER-CLIENT-UTILS package.
                                                              (line  56)
* URL:                                   WEBDRIVER-CLIENT package.
                                                              (line 129)
* USE-SESSION:                           WEBDRIVER-CLIENT package.
                                                              (line 154)
* WAIT-FOR:                              WEBDRIVER-CLIENT-UTILS package.
                                                              (line  47)
* WEBDRIVER-CLIENT-UTILS:ATTR:           WEBDRIVER-CLIENT-UTILS package.
                                                              (line  68)
* WEBDRIVER-CLIENT-UTILS:CLASSLIST:      WEBDRIVER-CLIENT-UTILS package.
                                                              (line  64)
* WEBDRIVER-CLIENT-UTILS:CLASSNAME:      WEBDRIVER-CLIENT-UTILS package.
                                                              (line  52)
* WEBDRIVER-CLIENT-UTILS:CLICK:          WEBDRIVER-CLIENT-UTILS package.
                                                              (line  84)
* WEBDRIVER-CLIENT-UTILS:ELEM:           WEBDRIVER-CLIENT-UTILS package.
                                                              (line  76)
* WEBDRIVER-CLIENT-UTILS:FIND-ELEM:      WEBDRIVER-CLIENT-UTILS package.
                                                              (line  43)
* WEBDRIVER-CLIENT-UTILS:GET-COOKIE:     WEBDRIVER-CLIENT-UTILS package.
                                                              (line  39)
* WEBDRIVER-CLIENT-UTILS:ID:             WEBDRIVER-CLIENT-UTILS package.
                                                              (line  35)
* WEBDRIVER-CLIENT-UTILS:SEND-KEY:       WEBDRIVER-CLIENT-UTILS package.
                                                              (line  60)
* WEBDRIVER-CLIENT-UTILS:SEND-KEYS:      WEBDRIVER-CLIENT-UTILS package.
                                                              (line  72)
* WEBDRIVER-CLIENT-UTILS:TEXT:           WEBDRIVER-CLIENT-UTILS package.
                                                              (line  56)
* WEBDRIVER-CLIENT-UTILS:WAIT-FOR:       WEBDRIVER-CLIENT-UTILS package.
                                                              (line  47)
* WEBDRIVER-CLIENT:ACCEPT-ALERT:         WEBDRIVER-CLIENT package.
                                                              (line 245)
* WEBDRIVER-CLIENT:ACTIVE-ELEMENT:       WEBDRIVER-CLIENT package.
                                                              (line 411)
* WEBDRIVER-CLIENT:ALERT-TEXT:           WEBDRIVER-CLIENT package.
                                                              (line 252)
* WEBDRIVER-CLIENT:BACK:                 WEBDRIVER-CLIENT package.
                                                              (line  81)
* WEBDRIVER-CLIENT:CHROME-CAPABILITIES:  WEBDRIVER-CLIENT package.
                                                              (line 302)
* WEBDRIVER-CLIENT:CLOSE-CURRENT-WINDOW: WEBDRIVER-CLIENT package.
                                                              (line 564)
* WEBDRIVER-CLIENT:COOKIE:               WEBDRIVER-CLIENT package.
                                                              (line 398)
* WEBDRIVER-CLIENT:DELETE-ALL-COOKIES:   WEBDRIVER-CLIENT package.
                                                              (line 330)
* WEBDRIVER-CLIENT:DELETE-COOKIE:        WEBDRIVER-CLIENT package.
                                                              (line 344)
* WEBDRIVER-CLIENT:DELETE-SESSION:       WEBDRIVER-CLIENT package.
                                                              (line 183)
* WEBDRIVER-CLIENT:DISMISS-ALERT:        WEBDRIVER-CLIENT package.
                                                              (line 259)
* WEBDRIVER-CLIENT:ELEMENT-ATTRIBUTE:    WEBDRIVER-CLIENT package.
                                                              (line 441)
* WEBDRIVER-CLIENT:ELEMENT-CLEAR:        WEBDRIVER-CLIENT package.
                                                              (line 527)
* WEBDRIVER-CLIENT:ELEMENT-CLICK:        WEBDRIVER-CLIENT package.
                                                              (line 534)
* WEBDRIVER-CLIENT:ELEMENT-DISPLAYED:    WEBDRIVER-CLIENT package.
                                                              (line 433)
* WEBDRIVER-CLIENT:ELEMENT-ENABLED:      WEBDRIVER-CLIENT package.
                                                              (line 448)
* WEBDRIVER-CLIENT:ELEMENT-ID:           WEBDRIVER-CLIENT package.
                                                              (line  44)
* WEBDRIVER-CLIENT:ELEMENT-RECT:         WEBDRIVER-CLIENT package.
                                                              (line 455)
* WEBDRIVER-CLIENT:ELEMENT-SCREENSHOT:   WEBDRIVER-CLIENT package.
                                                              (line 202)
* WEBDRIVER-CLIENT:ELEMENT-SEND-KEYS:    WEBDRIVER-CLIENT package.
                                                              (line 548)
* WEBDRIVER-CLIENT:ELEMENT-TAGNAME:      WEBDRIVER-CLIENT package.
                                                              (line 485)
* WEBDRIVER-CLIENT:ELEMENT-TEXT:         WEBDRIVER-CLIENT package.
                                                              (line 476)
* WEBDRIVER-CLIENT:EXECUTE-SCRIPT:       WEBDRIVER-CLIENT package.
                                                              (line 271)
* WEBDRIVER-CLIENT:FIND-COOKIE:          WEBDRIVER-CLIENT package.
                                                              (line 352)
* WEBDRIVER-CLIENT:FIND-ELEMENT:         WEBDRIVER-CLIENT package.
                                                              (line 491)
* WEBDRIVER-CLIENT:FIND-ELEMENTS:        WEBDRIVER-CLIENT package.
                                                              (line 424)
* WEBDRIVER-CLIENT:FIREFOX-CAPABILITIES: WEBDRIVER-CLIENT package.
                                                              (line 309)
* WEBDRIVER-CLIENT:KEY:                  WEBDRIVER-CLIENT package.
                                                              (line 216)
* WEBDRIVER-CLIENT:LOG-TYPES:            WEBDRIVER-CLIENT package.
                                                              (line  56)
* WEBDRIVER-CLIENT:LOGS:                 WEBDRIVER-CLIENT package.
                                                              (line  20)
* WEBDRIVER-CLIENT:MAKE-CAPABILITIES:    WEBDRIVER-CLIENT package.
                                                              (line  71)
* WEBDRIVER-CLIENT:MAKE-COOKIE:          WEBDRIVER-CLIENT package.
                                                              (line 337)
* WEBDRIVER-CLIENT:MAKE-SESSION:         WEBDRIVER-CLIENT package.
                                                              (line 166)
* WEBDRIVER-CLIENT:MERGE-CAPABILITIES:   WEBDRIVER-CLIENT package.
                                                              (line 296)
* WEBDRIVER-CLIENT:MOUSE-CLICK:          WEBDRIVER-CLIENT package.
                                                              (line  46)
* WEBDRIVER-CLIENT:MOUSE-MOVE-TO:        WEBDRIVER-CLIENT package.
                                                              (line  32)
* WEBDRIVER-CLIENT:PAGE-SOURCE:          WEBDRIVER-CLIENT package.
                                                              (line  91)
* WEBDRIVER-CLIENT:PAGE-TITLE:           WEBDRIVER-CLIENT package.
                                                              (line  99)
* WEBDRIVER-CLIENT:PERFORM-ACTIONS:      WEBDRIVER-CLIENT package.
                                                              (line 223)
* WEBDRIVER-CLIENT:REFRESH:              WEBDRIVER-CLIENT package.
                                                              (line 107)
* WEBDRIVER-CLIENT:SCREENSHOT:           WEBDRIVER-CLIENT package.
                                                              (line 192)
* WEBDRIVER-CLIENT:START-INTERACTIVE-SESSION: WEBDRIVER-CLIENT package.
                                                              (line 139)
* WEBDRIVER-CLIENT:STOP-INTERACTIVE-SESSION: WEBDRIVER-CLIENT package.
                                                              (line 160)
* WEBDRIVER-CLIENT:SWITCH-TO-FRAME:      WEBDRIVER-CLIENT package.
                                                              (line 113)
* WEBDRIVER-CLIENT:URL:                  WEBDRIVER-CLIENT package.
                                                              (line 129)
* WEBDRIVER-CLIENT:USE-SESSION:          WEBDRIVER-CLIENT package.
                                                              (line 154)
* WEBDRIVER-CLIENT:WEBDRIVER-STATUS:     WEBDRIVER-CLIENT package.
                                                              (line  74)
* WEBDRIVER-CLIENT:WITH-SESSION:         WEBDRIVER-CLIENT package.
                                                              (line 147)
* WEBDRIVER-STATUS:                      WEBDRIVER-CLIENT package.
                                                              (line  74)
* WITH-SESSION:                          WEBDRIVER-CLIENT package.
                                                              (line 147)



Tag Table:
Node: Top250
Node: Introduction1160
Node: Usage2022
Node: Sessions3098
Node: Capabilities4604
Node: alwaysMatch7073
Node: firstMatch7811
Node: Combining alwaysMatch and firstMatch8367
Node: List of capabilities10028
Node: Vendor-specific capabilities11766
Node: Actions12466
Node: Installation14854
Node: Utils15355
Node: Interactive session16091
Node: Utils API conventions16567
Node: Waiting for the reaction17221
Node: Running tests17743
Node: API18054
Node: WEBDRIVER-CLIENT package18225
Ref: WEBDRIVER-CLIENT:LOGS function18718
Ref: WEBDRIVER-CLIENT:NO-SUCH-ELEMENT-ERROR class18886
Ref: WEBDRIVER-CLIENT:MOUSE-MOVE-TO function19093
Ref: WEBDRIVER-CLIENT:ELEMENT-ID function19600
Ref: WEBDRIVER-CLIENT:MOUSE-CLICK function19651
Ref: WEBDRIVER-CLIENT:LOG-TYPES function20081
Ref: WEBDRIVER-CLIENT:MAKE-CAPABILITIES function20711
Ref: WEBDRIVER-CLIENT:WEBDRIVER-STATUS function20841
Ref: WEBDRIVER-CLIENT:BACK function20947
Ref: WEBDRIVER-CLIENT:PAGE-SOURCE function21344
Ref: WEBDRIVER-CLIENT:PAGE-TITLE function21597
Ref: WEBDRIVER-CLIENT:REFRESH function21875
Ref: WEBDRIVER-CLIENT:SWITCH-TO-FRAME function21992
Ref: WEBDRIVER-CLIENT:URL function22603
Ref: WEBDRIVER-CLIENT:START-INTERACTIVE-SESSION function22807
Ref: WEBDRIVER-CLIENT:WITH-SESSION macro23072
Ref: WEBDRIVER-CLIENT:USE-SESSION function23274
Ref: WEBDRIVER-CLIENT:STOP-INTERACTIVE-SESSION function23383
Ref: WEBDRIVER-CLIENT:MAKE-SESSION function23494
Ref: WEBDRIVER-CLIENT:DELETE-SESSION function24246
Ref: WEBDRIVER-CLIENT:SCREENSHOT function24385
Ref: WEBDRIVER-CLIENT:ELEMENT-SCREENSHOT function24804
Ref: WEBDRIVER-CLIENT:KEY function25268
Ref: WEBDRIVER-CLIENT:PERFORM-ACTIONS function25432
Ref: WEBDRIVER-CLIENT:ACCEPT-ALERT function26413
Ref: WEBDRIVER-CLIENT:ALERT-TEXT function26588
Ref: WEBDRIVER-CLIENT:DISMISS-ALERT function26761
Ref: WEBDRIVER-CLIENT:EXECUTE-SCRIPT function27161
Ref: WEBDRIVER-CLIENT:MERGE-CAPABILITIES function28224
Ref: WEBDRIVER-CLIENT:CHROME-CAPABILITIES function28336
Ref: WEBDRIVER-CLIENT:FIREFOX-CAPABILITIES function28535
Ref: WEBDRIVER-CLIENT:*DEFAULT-CAPABILITIES* variable28843
Ref: WEBDRIVER-CLIENT:DELETE-ALL-COOKIES function28967
Ref: WEBDRIVER-CLIENT:MAKE-COOKIE function29151
Ref: WEBDRIVER-CLIENT:DELETE-COOKIE function29294
Ref: WEBDRIVER-CLIENT:FIND-COOKIE function29511
Ref: WEBDRIVER-CLIENT:COOKIE class29721
Ref: WEBDRIVER-CLIENT:COOKIE function31000
Ref: WEBDRIVER-CLIENT:ACTIVE-ELEMENT function31328
Ref: WEBDRIVER-CLIENT:FIND-ELEMENTS function31799
Ref: WEBDRIVER-CLIENT:ELEMENT-DISPLAYED function32121
Ref: WEBDRIVER-CLIENT:ELEMENT-ATTRIBUTE function32339
Ref: WEBDRIVER-CLIENT:ELEMENT-ENABLED function32504
Ref: WEBDRIVER-CLIENT:ELEMENT-RECT function32707
Ref: WEBDRIVER-CLIENT:ELEMENT-TEXT function33444
Ref: WEBDRIVER-CLIENT:ELEMENT-TAGNAME function33816
Ref: WEBDRIVER-CLIENT:FIND-ELEMENT function33952
Ref: WEBDRIVER-CLIENT:ELEMENT-CLEAR function35330
Ref: WEBDRIVER-CLIENT:ELEMENT-CLICK function35576
Ref: WEBDRIVER-CLIENT:ELEMENT-SEND-KEYS function36119
Ref: WEBDRIVER-CLIENT:CLOSE-CURRENT-WINDOW function36601
Node: WEBDRIVER-CLIENT-UTILS package36728
Ref: WEBDRIVER-CLIENT-UTILS:*TIMEOUT* variable37301
Ref: WEBDRIVER-CLIENT-UTILS:*DEFAULT-ELEMENT-FUNC* variable37404
Ref: WEBDRIVER-CLIENT-UTILS:ID function37661
Ref: WEBDRIVER-CLIENT-UTILS:GET-COOKIE function37743
Ref: WEBDRIVER-CLIENT-UTILS:FIND-ELEM function37832
Ref: WEBDRIVER-CLIENT-UTILS:WAIT-FOR function37980
Ref: WEBDRIVER-CLIENT-UTILS:CLASSNAME function38196
Ref: WEBDRIVER-CLIENT-UTILS:TEXT function38292
Ref: WEBDRIVER-CLIENT-UTILS:SEND-KEY function38380
Ref: WEBDRIVER-CLIENT-UTILS:CLASSLIST function38479
Ref: WEBDRIVER-CLIENT-UTILS:ATTR function38576
Ref: WEBDRIVER-CLIENT-UTILS:SEND-KEYS function38673
Ref: WEBDRIVER-CLIENT-UTILS:ELEM function38773
Ref: WEBDRIVER-CLIENT-UTILS:CLICK function39080
Node: Index39167

End Tag Table
