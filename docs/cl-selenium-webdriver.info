This is cl-selenium-webdriver.info, produced by makeinfo version 6.7
from cl-selenium-webdriver.weaved.texi.

INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* cl-selenium-webdriver: (cl-selenium-webdriver)Common Lisp Selenium Webdriver.
END-INFO-DIR-ENTRY


File: cl-selenium-webdriver.info,  Node: Top,  Next: Introduction,  Up: (dir)

Top
***

CL Selenium WebDriver is a binding library to the Selenium 2.0

* Menu:

* Introduction::
* Usage::
* Installation::
* Utils::
* API::
* Index::


File: cl-selenium-webdriver.info,  Node: Introduction,  Next: Usage,  Prev: Top,  Up: Top

1 Introduction
**************

CL Selenium WebDriver is a binding library to the Selenium 2.0

   This software is in development.  The APIs will be likely to change.


File: cl-selenium-webdriver.info,  Node: Usage,  Next: Installation,  Prev: Introduction,  Up: Top

2 Usage
*******

     ;; see examples/*.lisp and t/*.lisp
     (in-package :cl-user)

     (eval-when (:compile-toplevel :load-toplevel :execute)
       (ql:quickload :cl-selenium))

     (defpackage go-test
       (:use :cl :cl-selenium))

     (in-package :go-test)

     (defparameter *code* "
     package main
     import \"fmt\"

     func main() {
         fmt.Print(\"Hello WebDriver!\")
     }")

     (with-session ()
       (setf (url) "http://play.golang.org/?simple=1")
       (let ((elem (find-element "#code" :by :css-selector)))
         (element-clear elem)
         (element-send-keys elem *code*))
       (let ((btn (find-element "#run")))
         (element-click btn))

       (loop
          with div = (find-element "#output")
          for ouput = (element-text div)
          while (equal ouput "Waiting for remote server...")
          do (sleep 0.1)
          finally (print ouput)))


File: cl-selenium-webdriver.info,  Node: Installation,  Next: Utils,  Prev: Usage,  Up: Top

3 Installation
**************

     git clone https://github.com/TatriX/cl-selenium-webdriver ~/quicklisp/local-projects/
     (ql:quickload :cl-selenium)

   You need a running instance of selenium-server-standalone.

   [Download](http://www.seleniumhq.org/download/) it and run:

     curl -L0 https://goo.gl/SP94ZB -o selenium-server-standalone.jar
     java -jar selenium-server-standalone.jar


File: cl-selenium-webdriver.info,  Node: Utils,  Next: API,  Prev: Installation,  Up: Top

4 Utils
*******

There is a ':cl-selenium-utils' package which should reduce boilerplate.
For example:

     (defpackage my-test
       (:use :cl :cl-selenium)
       (:import-from :cl-selenium-utils
                     :send-keys
                     :click
                     :wait-for
                     :classlist))

     (in-package :my-test)

     (with-session ()
       (setf (url) "http://google.com")
       (send-keys "cl-selenium-webdriver")
       (click "[name=btnK]")
       (wait-for "#resultStats"))


* Menu:

* Interactive session::
* Utils API conventions::
* Waiting for the reaction::
* Running tests::


File: cl-selenium-webdriver.info,  Node: Interactive session,  Next: Utils API conventions,  Up: Utils

4.1 Interactive session
=======================

You can just start the session and control it from your repl:

     (in-package :my-test)

     (start-interactive-session)

     (setf (url) "http://google.com")
     (send-keys "cl-selenium-webdriver")
     (send-keys (key :enter))
     (classlist "#slim_appbar") ; prints ("ab_tnav_wrp")

     (stop-interactive-session)


File: cl-selenium-webdriver.info,  Node: Utils API conventions,  Next: Waiting for the reaction,  Prev: Interactive session,  Up: Utils

4.2 Utils API conventions
=========================

If utility function needs an element to work on it defaults to
'(active-element)'.
     (click) ; click on the current active element.

   You can also pass a css selector as a last parameter.

     (print (id "#submit")) ; print id the of matched element

     (assert (= (first (classlist "div")) "first-div-ever"))

   To change default element you can:

     (setf cl-selenium-utils:*default-element-func* (lambda () (find-element "input[type=submit]"))


File: cl-selenium-webdriver.info,  Node: Waiting for the reaction,  Next: Running tests,  Prev: Utils API conventions,  Up: Utils

4.3 Waiting for the reaction
============================

Often you need to wait for some action to be done.  For example if you
do a '(click)' on the button to load search results, you need to wait
them to load.

     (wait-for ".search-result" :timeout 10) ; wait 10 seconds

   Timeout defaults to 30 seconds.  You can globally change it:
     (setf cl-selenium-utils:*timeout* 3)


File: cl-selenium-webdriver.info,  Node: Running tests,  Prev: Waiting for the reaction,  Up: Utils

4.4 Running tests
=================

REPL
====

     (ql:quickload '(:cl-selenium :prove))
     (setf prove:*enable-colors* nil)
     (prove:run :cl-selenium-test)

Shell
=====

     sh
     ./test.sh


File: cl-selenium-webdriver.info,  Node: API,  Next: Index,  Prev: Utils,  Up: Top

5 API
*****

* Menu:

* CL-SELENIUM package::
* CL-SELENIUM-UTILS package::


File: cl-selenium-webdriver.info,  Node: CL-SELENIUM package,  Next: CL-SELENIUM-UTILS package,  Up: API

5.1 CL-SELENIUM package
=======================

 -- PACKAGE: CL-SELENIUM

     This package exports functions for working with Selenium WebDriver.

     For documentation see:
     - <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol>
     - <https://www.w3.org/TR/webdriver1>

External definitions
====================

Session
-------

 -- CL-SELENIUM: USE-SESSION (session)

     Make SESSION the current SESSION.

     Category: SESSION

 -- CL-SELENIUM: START-INTERACTIVE-SESSION (&rest capabilities)

     Start an interactive session.  Use this to interact with Selenium
     driver from a REPL.

     Category: Session
     See: *note MAKE-SESSION: CL-SELENIUM:MAKE-SESSION function.

 -- CL-SELENIUM: MAKE-SESSION (&key (browser-name :chrome)
          browser-version platform-name platform-version
          accept-ssl-certs additional-capabilities)

     Creates a new WebDriver session with the endpoint node.  If the
     creation fails, a session not created error is returned.

     Category: Session
     See: <https://www.w3.org/TR/webdriver1/#new-session> .
     See: <https://www.w3.org/TR/webdriver1/#capabilities> .

 -- CL-SELENIUM: STOP-INTERACTIVE-SESSION nil

     Stop an interactive session.

     Category: Session

 -- CL-SELENIUM: DELETE-SESSION (session)

     Delete the WebDriver SESSION.

     Category: SESSION

 -- CL-SELENIUM: WITH-SESSION ((&rest capabilities) &body body)

     Execute BODY inside a Selenium session.

     Category: Session
     See: *note MAKE-SESSION: CL-SELENIUM:MAKE-SESSION function.

Uncategorized
-------------

 -- CL-SELENIUM: MOUSE-CLICK (button &key (session *session*))

     Click any mouse BUTTON (at the coordinates set by the last moveto
     command).  Note that calling this command after calling buttondown
     and before calling BUTTON up (or any out-of-order interactions
     sequence) will yield undefined behaviour).

     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidclick>

 -- CL-SELENIUM: MOUSE-MOVE-TO (x y &key element (session *session*))

     Move the mouse by an offset of the specificed ELEMENT.  If no
     ELEMENT is specified, the move is relative to the current mouse
     cursor.  If an ELEMENT is provided but no offset, the mouse will be
     moved to the center of the ELEMENT.  If the ELEMENT is not visible,
     it will be scrolled into view.

     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidmoveto>

 -- CL-SELENIUM: LOGS (type &key (session *session*))

     Return the logs of a particular TYPE.
     See: *note LOG-TYPES: CL-SELENIUM:LOG-TYPES function.

 -- CL-SELENIUM: LOG-TYPES (&key (session *session*))

     Return the types of logs supported by the WebDriver.

     - browser: Javascript console logs from the browser.
     - client: Logs from the client side implementation of the WebDriver
     protocol (e.g.  the Java bindings).
     - driver: Logs from the internals of the driver (e.g.
     FirefoxDriver internals).
     - performance: Logs relating to the performance characteristics of
     the page under test (e.g.  resource load timings).
     - server: Logs from within the selenium server.

     See: <https://github.com/SeleniumHQ/selenium/wiki/Logging> .

 -- CL-SELENIUM: ELEMENT-ID (sb-pcl::object)

 -- CL-SELENIUM: NO-SUCH-ELEMENT-ERROR

     Error signaled when no such element is found.

     Class precedence list: 'no-such-element-error, find-error, error,
     serious-condition, condition, t'

 -- CL-SELENIUM: KEY (key)

     Returns a string with KEY's codepoint.

Elements
--------

 -- CL-SELENIUM: FIND-ELEMENT (value &key (by :css-selector) (session
          *session*))

     The Find Element command is used to find an element in the current
     browsing context that can be used as the web element context for
     future element-centric commands.

     For example, consider this pseudo code which retrieves an element
     with the #toremove ID and uses this as the argument for a script it
     injects to remove it from the HTML document:

     let body *note =: COMMON-LISP:= function.
     SESSION.find.css("#toremove");
     SESSION.execute("arguments[0].remove()", [body]);

     The BY parameter represents the element location strategy.

     It can be one of:
     - :ID : Finds element BY id.
     - :CLASS-NAME : Finds element BY class name.
     - :CSS-SELECTOR : Returns element that matches css selector.
     - :LINK-TEXT : Returns element that matches <a> element text.
     - :PARTIAL-LINK-TEXT: Returns element that matches <a> element text
     partially.
     - :TAG-NAME: Returns element that matches tag name.
     - :XPATH: Returns element that matches the XPath expression.

     If result is empty, a *note HANDLE-FIND-ERROR:
     CL-SELENIUM:HANDLE-FIND-ERROR function. is signaled.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#dfn-find-element> .

 -- CL-SELENIUM: ELEMENT-TEXT (element &key (session *session*))

     The Get ELEMENT Text command intends to return an ELEMENT’s text
     “as rendered”.  An ELEMENT’s rendered text is also used for
     locating a elements by their link text and partial link text.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#get-element-text> .

 -- CL-SELENIUM: ELEMENT-TAGNAME (element &key (session *session*))

     Return the ELEMENT's tag name.

     Category: Elements

 -- CL-SELENIUM: ELEMENT-ATTRIBUTE (element name &key (session
          *session*))

     Return the ELEMENT's attribute named NAME.

     Category: Elements

 -- CL-SELENIUM: ELEMENT-DISPLAYED (element &key (session *session*))

     Returns if ELEMENT is visible.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#element-displayedness> .

 -- CL-SELENIUM: ELEMENT-LOCATION (element &key (session *session*))

     Return the ELEMENT's location.

     Category: Elements

 -- CL-SELENIUM: FIND-ELEMENTS (value &key (by :css-selector) (session
          *session*))

     Find elements that match VALUE using location strategy in BY.

     Category: Elements
     See *note FIND-ELEMENT: CL-SELENIUM:FIND-ELEMENT function.
     See <https://www.w3.org/TR/webdriver1/#find-elements> .

 -- CL-SELENIUM: ACTIVE-ELEMENT (&key (session *session*))

     Return the active element of the current browsing context’s
     document.
     The active element is the Element within the DOM that currently has
     focus.
     If there's no active element, an error is signaled.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver2/#get-active-element.>
     See:
     <https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement.>

Windows
-------

 -- CL-SELENIUM: CLOSE-CURRENT-WINDOW (&key (session *session*))

     Close the current window.

     Category: Windows

Navigation
----------

 -- CL-SELENIUM: URL (&key (session *session*))

     Get the current url in SESSION.

     Category: Navigation
     See: <https://www.w3.org/TR/webdriver1/#dfn-get-current-url> .

 -- CL-SELENIUM: SWITCH-TO-FRAME (id &key (session *session*))

     Change focus to another frame on the page.  If the frame ID is
     null, the server
     should switch to the page's default content.

     In the context of a web browser, a frame is a part of a web page or
     browser window which displays content independent of its container,
     with the ability to load content independently.

     Category: Navigation
     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidframe>
     .
     See: <https://en.wikipedia.org/wiki/Frame_(World_Wide_Web)> .

 -- CL-SELENIUM: PAGE-TITLE (&key (session *session*))

     This command returns the document title of the current top-level
     browsing context, equivalent to calling document.title.

     Category: Navigation
     See: <https://www.w3.org/TR/webdriver2/#get-title> .

 -- CL-SELENIUM: REFRESH (&key (session *session*))

     Refresh the current page.

     Category: Navigation

 -- CL-SELENIUM: BACK (&key (session *session*))

     This command causes the browser to traverse one step backward in
     the joint SESSION history of the current top-level browsing
     context.  This is equivalent to pressing the back button in the
     browser chrome or invoking window.history.back.

     Category: Navigation
     See: <https://www.w3.org/TR/webdriver1/#dfn-back> .

Screen capture
--------------

 -- CL-SELENIUM: ELEMENT-SCREENSHOT (element &key (session *session*))

     The Take ELEMENT Screenshot command takes a screenshot of the
     visible region encompassed by the bounding rectangle of an ELEMENT.
     If given a parameter argument scroll that evaluates to false, the
     ELEMENT will not be scrolled into view.

     Category: Screen capture
     See: <https://www.w3.org/TR/webdriver1/#take-element-screenshot> .

 -- CL-SELENIUM: SCREENSHOT (&key (session *session*))

     Screenshots are a mechanism for providing additional visual
     diagnostic information.  They work by dumping a snapshot of the
     initial viewport’s framebuffer as a lossless PNG image.  It is
     returned to the local end as a Base64 encoded string.

     Category: Screen capture
     See: <https://www.w3.org/TR/webdriver2/#screen-capture> .

Cookies
-------

 -- CL-SELENIUM: COOKIE

     A cookie is described in [RFC6265] by a name-value pair holding the
     cookie’s data, followed by zero or more attribute-value pairs
     describing its characteristics.

     Category: Cookies

     Class precedence list: 'cookie, standard-object, t'

     Slots:
        * 'name' -- initarg: ':name'

          The name of the cookie
        * 'value' -- initarg: ':value'

          The cookie value
        * 'path' -- initarg: ':path'

          The cookie path.  Defaults to '/' if omitted when adding a
          cookie.
        * 'domain' -- initarg: ':domain'

          The domain the cookie is visible to.  Defaults to the current
          browsing context’s active document’s URL domain if omitted
          when adding a cookie.
        * 'secure' -- initarg: ':secure'

          Whether the cookie is a secure cookie.  Defaults to false if
          omitted when adding a cookie.
        * 'http-only' -- initarg: ':http-only'

          Whether the cookie is an HTTP only cookie.  Defaults to false
          if omitted when adding a cookie.
        * 'expiry' -- initarg: ':expiry'

          When the cookie expires, specified in seconds since Unix
          Epoch.  Must not be set if omitted when adding a cookie.

 -- CL-SELENIUM: COOKIE (&key (session *session*))

     Retrieve all cookies visible to the current page.

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#get-all-cookies> .
     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidcookie>
     .

 -- CL-SELENIUM: DELETE-ALL-COOKIES (&key (session *session*))

     Deletes all cookies

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#delete-all-cookies>

 -- CL-SELENIUM: DELETE-COOKIE (cookie-name &key (session *session*))

     Delete the cookie with name COOKIE-NAME.

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#delete-cookie>

 -- CL-SELENIUM: FIND-COOKIE (cookie-name &key (session *session*))

     Retrieve the cookie with name COOKIE-NAME.

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#get-named-cookie>

User prompts
------------

 -- CL-SELENIUM: DISMISS-ALERT (&key (session *session*))

     Dismiss Alert.

     Category: User prompts
     See: <https://www.w3.org/TR/webdriver1/#dismiss-alert>

 -- CL-SELENIUM: ACCEPT-ALERT (&key (session *session*))

     Accept Alert.

     Category: User prompts
     See: <https://www.w3.org/TR/webdriver1/#dfn-accept-alert>

 -- CL-SELENIUM: ALERT-TEXT (&key (session *session*))

     Get Alert Text.

     Category: User prompts
     See: <https://www.w3.org/TR/webdriver1/#get-alert-text>

Element interaction
-------------------

 -- CL-SELENIUM: ELEMENT-SEND-KEYS (element keys &key (session
          *session*))

     The ELEMENT Send KEYS command scrolls into view the form control
     ELEMENT and then sends the provided KEYS to the ELEMENT.  In case
     the ELEMENT is not keyboard-interactable, an ELEMENT not
     interactable error is returned.

     KEYS should be a string.

     Category: ELEMENT interaction
     See: <https://www.w3.org/TR/webdriver1/#element-send-keys> .

 -- CL-SELENIUM: ELEMENT-CLEAR (element &key (session *session*))

     Clear the contents of ELEMENT (for example, a form field ELEMENT).

     Category: ELEMENT interaction
     See: <https://www.w3.org/TR/webdriver1/#dfn-element-clear.>

 -- CL-SELENIUM: ELEMENT-CLICK (element &key (session *session*))

     The ELEMENT Click command scrolls into view the ELEMENT if it is
     not already pointer-interactable, and clicks its in-view center
     point.

     If the ELEMENT’s center point is obscured by another ELEMENT, an
     ELEMENT click intercepted error is returned.  If the ELEMENT is
     outside the viewport, an ELEMENT not interactable error is
     returned.

     Category: ELEMENT interaction
     See: <https://www.w3.org/TR/webdriver1/#element-click> .

Cookie
------

 -- CL-SELENIUM: MAKE-COOKIE (name value &key path domain secure expiry)

     Create a cookie object.

     Category: Cookie

Document handling
-----------------

 -- CL-SELENIUM: EXECUTE-SCRIPT (script args &key (session *session*))

     Inject a snippet of JavaScript into the page for execution in the
     context of the currently selected frame.  The executed SCRIPT is
     assumed to be synchronous and the result of evaluating the SCRIPT
     is returned to the client.

     The SCRIPT argument defines the SCRIPT to execute in the form of a
     function body.  The value returned by that function will be
     returned to the client.  The function will be invoked with the
     provided ARGS array and the values may be accessed via the
     arguments object in the order specified.

     Arguments may be any JSON-primitive, array, or JSON object.  JSON
     objects that define a WebElement reference will be converted to the
     corresponding DOM element.  Likewise, any WebElements in the SCRIPT
     result will be returned to the client as WebElement JSON objects.

     Category: Document handling
     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidexecute>
     .


File: cl-selenium-webdriver.info,  Node: CL-SELENIUM-UTILS package,  Prev: CL-SELENIUM package,  Up: API

5.2 CL-SELENIUM-UTILS package
=============================

 -- PACKAGE: CL-SELENIUM-UTILS

     Package with the purpose of reducing boilerplate.

External definitions
====================

Variables
---------

 -- CL-SELENIUM-UTILS: *TIMEOUT*

     Default timeout value to use in selenium-utils functions.

 -- CL-SELENIUM-UTILS: *DEFAULT-ELEMENT-FUNC*

     Function used to get the 'default element' by selenium-utils
     functions.
     It is *note ACTIVE-ELEMENT: CL-SELENIUM:ACTIVE-ELEMENT function.
     function by default.

Macros
------

Generic functions
-----------------

Functions
---------

 -- CL-SELENIUM-UTILS: ID (&optional selector)

     Get active element id.

 -- CL-SELENIUM-UTILS: GET-COOKIE (cookie name)

     Get value of COOKIE at NAME.

 -- CL-SELENIUM-UTILS: FIND-ELEM (selector &key (by :css-selector))

     Find element BY SELECTOR.  Returns NIL if the element is not found.

 -- CL-SELENIUM-UTILS: WAIT-FOR (selector &key (timeout *timeout*))

     Wait for an element that matches SELECTOR to appear on the screen.
     TIMEOUT indicates how much time to wait (default is *TIMEOUT*).

 -- CL-SELENIUM-UTILS: CLASSNAME (&optional selector)

     Get active element classname.

 -- CL-SELENIUM-UTILS: TEXT (&optional selector)

     Get active element's text.

 -- CL-SELENIUM-UTILS: SEND-KEY (key &optional selector)

     Send a KEY to active element.

 -- CL-SELENIUM-UTILS: CLASSLIST (&optional selector)

     Get active element class list.

 -- CL-SELENIUM-UTILS: ATTR (name &optional selector)

     Get acttive element attribute.

 -- CL-SELENIUM-UTILS: SEND-KEYS (keys &optional selector)

     Send KEYS to active element.

 -- CL-SELENIUM-UTILS: ELEM (&optional selector)

     If SELECTOR is given, wait for an element that matches the SELECTOR
     to appear.
     Otherwise, call *note *DEFAULT-ELEMENT-FUNC*:
     CL-SELENIUM-UTILS:*DEFAULT-ELEMENT-FUNC* variable. (the active
     element is returned by default).

 -- CL-SELENIUM-UTILS: CLICK (&optional selector)

     Click on active element.

Classes
-------


File: cl-selenium-webdriver.info,  Node: Index,  Prev: API,  Up: Top

6 Index
*******

 [index ]
* Menu:

* cl-selenium-webdriver:                 Top.                   (line 6)
* cl-selenium-webdriver <1>:             Top.                   (line 6)

 [index ]
* Menu:

* *DEFAULT-ELEMENT-FUNC*:                CL-SELENIUM-UTILS package.
                                                               (line 20)
* *TIMEOUT*:                             CL-SELENIUM-UTILS package.
                                                               (line 16)
* CL-SELENIUM-UTILS:*DEFAULT-ELEMENT-FUNC*: CL-SELENIUM-UTILS package.
                                                               (line 20)
* CL-SELENIUM-UTILS:*TIMEOUT*:           CL-SELENIUM-UTILS package.
                                                               (line 16)

 [index ]
* Menu:

* ACCEPT-ALERT:                          CL-SELENIUM package. (line 379)
* ACTIVE-ELEMENT:                        CL-SELENIUM package. (line 201)
* ALERT-TEXT:                            CL-SELENIUM package. (line 386)
* ATTR:                                  CL-SELENIUM-UTILS package.
                                                              (line  69)
* BACK:                                  CL-SELENIUM package. (line 263)
* CL-SELENIUM-UTILS:ATTR:                CL-SELENIUM-UTILS package.
                                                              (line  69)
* CL-SELENIUM-UTILS:CLASSLIST:           CL-SELENIUM-UTILS package.
                                                              (line  65)
* CL-SELENIUM-UTILS:CLASSNAME:           CL-SELENIUM-UTILS package.
                                                              (line  53)
* CL-SELENIUM-UTILS:CLICK:               CL-SELENIUM-UTILS package.
                                                              (line  85)
* CL-SELENIUM-UTILS:ELEM:                CL-SELENIUM-UTILS package.
                                                              (line  77)
* CL-SELENIUM-UTILS:FIND-ELEM:           CL-SELENIUM-UTILS package.
                                                              (line  44)
* CL-SELENIUM-UTILS:GET-COOKIE:          CL-SELENIUM-UTILS package.
                                                              (line  40)
* CL-SELENIUM-UTILS:ID:                  CL-SELENIUM-UTILS package.
                                                              (line  36)
* CL-SELENIUM-UTILS:SEND-KEY:            CL-SELENIUM-UTILS package.
                                                              (line  61)
* CL-SELENIUM-UTILS:SEND-KEYS:           CL-SELENIUM-UTILS package.
                                                              (line  73)
* CL-SELENIUM-UTILS:TEXT:                CL-SELENIUM-UTILS package.
                                                              (line  57)
* CL-SELENIUM-UTILS:WAIT-FOR:            CL-SELENIUM-UTILS package.
                                                              (line  48)
* CL-SELENIUM:ACCEPT-ALERT:              CL-SELENIUM package. (line 379)
* CL-SELENIUM:ACTIVE-ELEMENT:            CL-SELENIUM package. (line 201)
* CL-SELENIUM:ALERT-TEXT:                CL-SELENIUM package. (line 386)
* CL-SELENIUM:BACK:                      CL-SELENIUM package. (line 263)
* CL-SELENIUM:CLOSE-CURRENT-WINDOW:      CL-SELENIUM package. (line 217)
* CL-SELENIUM:COOKIE:                    CL-SELENIUM package. (line 338)
* CL-SELENIUM:DELETE-ALL-COOKIES:        CL-SELENIUM package. (line 348)
* CL-SELENIUM:DELETE-COOKIE:             CL-SELENIUM package. (line 355)
* CL-SELENIUM:DELETE-SESSION:            CL-SELENIUM package. (line  51)
* CL-SELENIUM:DISMISS-ALERT:             CL-SELENIUM package. (line 372)
* CL-SELENIUM:ELEMENT-ATTRIBUTE:         CL-SELENIUM package. (line 172)
* CL-SELENIUM:ELEMENT-CLEAR:             CL-SELENIUM package. (line 409)
* CL-SELENIUM:ELEMENT-CLICK:             CL-SELENIUM package. (line 416)
* CL-SELENIUM:ELEMENT-DISPLAYED:         CL-SELENIUM package. (line 179)
* CL-SELENIUM:ELEMENT-ID:                CL-SELENIUM package. (line 108)
* CL-SELENIUM:ELEMENT-LOCATION:          CL-SELENIUM package. (line 186)
* CL-SELENIUM:ELEMENT-SCREENSHOT:        CL-SELENIUM package. (line 276)
* CL-SELENIUM:ELEMENT-SEND-KEYS:         CL-SELENIUM package. (line 396)
* CL-SELENIUM:ELEMENT-TAGNAME:           CL-SELENIUM package. (line 166)
* CL-SELENIUM:ELEMENT-TEXT:              CL-SELENIUM package. (line 157)
* CL-SELENIUM:EXECUTE-SCRIPT:            CL-SELENIUM package. (line 442)
* CL-SELENIUM:FIND-COOKIE:               CL-SELENIUM package. (line 362)
* CL-SELENIUM:FIND-ELEMENT:              CL-SELENIUM package. (line 124)
* CL-SELENIUM:FIND-ELEMENTS:             CL-SELENIUM package. (line 192)
* CL-SELENIUM:KEY:                       CL-SELENIUM package. (line 117)
* CL-SELENIUM:LOG-TYPES:                 CL-SELENIUM package. (line  93)
* CL-SELENIUM:LOGS:                      CL-SELENIUM package. (line  88)
* CL-SELENIUM:MAKE-COOKIE:               CL-SELENIUM package. (line 433)
* CL-SELENIUM:MAKE-SESSION:              CL-SELENIUM package. (line  34)
* CL-SELENIUM:MOUSE-CLICK:               CL-SELENIUM package. (line  67)
* CL-SELENIUM:MOUSE-MOVE-TO:             CL-SELENIUM package. (line  77)
* CL-SELENIUM:PAGE-TITLE:                CL-SELENIUM package. (line 249)
* CL-SELENIUM:REFRESH:                   CL-SELENIUM package. (line 257)
* CL-SELENIUM:SCREENSHOT:                CL-SELENIUM package. (line 286)
* CL-SELENIUM:START-INTERACTIVE-SESSION: CL-SELENIUM package. (line  26)
* CL-SELENIUM:STOP-INTERACTIVE-SESSION:  CL-SELENIUM package. (line  45)
* CL-SELENIUM:SWITCH-TO-FRAME:           CL-SELENIUM package. (line 233)
* CL-SELENIUM:URL:                       CL-SELENIUM package. (line 226)
* CL-SELENIUM:USE-SESSION:               CL-SELENIUM package. (line  20)
* CL-SELENIUM:WITH-SESSION:              CL-SELENIUM package. (line  57)
* CLASSLIST:                             CL-SELENIUM-UTILS package.
                                                              (line  65)
* CLASSNAME:                             CL-SELENIUM-UTILS package.
                                                              (line  53)
* CLICK:                                 CL-SELENIUM-UTILS package.
                                                              (line  85)
* CLOSE-CURRENT-WINDOW:                  CL-SELENIUM package. (line 217)
* COOKIE:                                CL-SELENIUM package. (line 338)
* DELETE-ALL-COOKIES:                    CL-SELENIUM package. (line 348)
* DELETE-COOKIE:                         CL-SELENIUM package. (line 355)
* DELETE-SESSION:                        CL-SELENIUM package. (line  51)
* DISMISS-ALERT:                         CL-SELENIUM package. (line 372)
* ELEM:                                  CL-SELENIUM-UTILS package.
                                                              (line  77)
* ELEMENT-ATTRIBUTE:                     CL-SELENIUM package. (line 172)
* ELEMENT-CLEAR:                         CL-SELENIUM package. (line 409)
* ELEMENT-CLICK:                         CL-SELENIUM package. (line 416)
* ELEMENT-DISPLAYED:                     CL-SELENIUM package. (line 179)
* ELEMENT-ID:                            CL-SELENIUM package. (line 108)
* ELEMENT-LOCATION:                      CL-SELENIUM package. (line 186)
* ELEMENT-SCREENSHOT:                    CL-SELENIUM package. (line 276)
* ELEMENT-SEND-KEYS:                     CL-SELENIUM package. (line 396)
* ELEMENT-TAGNAME:                       CL-SELENIUM package. (line 166)
* ELEMENT-TEXT:                          CL-SELENIUM package. (line 157)
* EXECUTE-SCRIPT:                        CL-SELENIUM package. (line 442)
* FIND-COOKIE:                           CL-SELENIUM package. (line 362)
* FIND-ELEM:                             CL-SELENIUM-UTILS package.
                                                              (line  44)
* FIND-ELEMENT:                          CL-SELENIUM package. (line 124)
* FIND-ELEMENTS:                         CL-SELENIUM package. (line 192)
* GET-COOKIE:                            CL-SELENIUM-UTILS package.
                                                              (line  40)
* ID:                                    CL-SELENIUM-UTILS package.
                                                              (line  36)
* KEY:                                   CL-SELENIUM package. (line 117)
* LOG-TYPES:                             CL-SELENIUM package. (line  93)
* LOGS:                                  CL-SELENIUM package. (line  88)
* MAKE-COOKIE:                           CL-SELENIUM package. (line 433)
* MAKE-SESSION:                          CL-SELENIUM package. (line  34)
* MOUSE-CLICK:                           CL-SELENIUM package. (line  67)
* MOUSE-MOVE-TO:                         CL-SELENIUM package. (line  77)
* PAGE-TITLE:                            CL-SELENIUM package. (line 249)
* REFRESH:                               CL-SELENIUM package. (line 257)
* SCREENSHOT:                            CL-SELENIUM package. (line 286)
* SEND-KEY:                              CL-SELENIUM-UTILS package.
                                                              (line  61)
* SEND-KEYS:                             CL-SELENIUM-UTILS package.
                                                              (line  73)
* START-INTERACTIVE-SESSION:             CL-SELENIUM package. (line  26)
* STOP-INTERACTIVE-SESSION:              CL-SELENIUM package. (line  45)
* SWITCH-TO-FRAME:                       CL-SELENIUM package. (line 233)
* TEXT:                                  CL-SELENIUM-UTILS package.
                                                              (line  57)
* URL:                                   CL-SELENIUM package. (line 226)
* USE-SESSION:                           CL-SELENIUM package. (line  20)
* WAIT-FOR:                              CL-SELENIUM-UTILS package.
                                                              (line  48)
* WITH-SESSION:                          CL-SELENIUM package. (line  57)



Tag Table:
Node: Top260
Node: Introduction496
Node: Usage757
Node: Installation1770
Node: Utils2265
Node: Interactive session2989
Node: Utils API conventions3469
Node: Waiting for the reaction4120
Node: Running tests4639
Node: API4944
Node: CL-SELENIUM package5107
Ref: CL-SELENIUM:USE-SESSION function5565
Ref: CL-SELENIUM:START-INTERACTIVE-SESSION function5669
Ref: CL-SELENIUM:MAKE-SESSION function5920
Ref: CL-SELENIUM:STOP-INTERACTIVE-SESSION function6366
Ref: CL-SELENIUM:DELETE-SESSION function6472
Ref: CL-SELENIUM:WITH-SESSION macro6575
Ref: CL-SELENIUM:MOUSE-CLICK function6804
Ref: CL-SELENIUM:MOUSE-MOVE-TO function7229
Ref: CL-SELENIUM:LOGS function7721
Ref: CL-SELENIUM:LOG-TYPES function7879
Ref: CL-SELENIUM:ELEMENT-ID function8504
Ref: CL-SELENIUM:NO-SUCH-ELEMENT-ERROR class8550
Ref: CL-SELENIUM:KEY function8752
Ref: CL-SELENIUM:FIND-ELEMENT function8844
Ref: CL-SELENIUM:ELEMENT-TEXT function10171
Ref: CL-SELENIUM:ELEMENT-TAGNAME function10538
Ref: CL-SELENIUM:ELEMENT-ATTRIBUTE function10669
Ref: CL-SELENIUM:ELEMENT-DISPLAYED function10829
Ref: CL-SELENIUM:ELEMENT-LOCATION function11032
Ref: CL-SELENIUM:FIND-ELEMENTS function11164
Ref: CL-SELENIUM:ACTIVE-ELEMENT function11476
Ref: CL-SELENIUM:CLOSE-CURRENT-WINDOW function11959
Ref: CL-SELENIUM:URL function12104
Ref: CL-SELENIUM:SWITCH-TO-FRAME function12286
Ref: CL-SELENIUM:PAGE-TITLE function12892
Ref: CL-SELENIUM:REFRESH function13165
Ref: CL-SELENIUM:BACK function13277
Ref: CL-SELENIUM:ELEMENT-SCREENSHOT function13700
Ref: CL-SELENIUM:SCREENSHOT function14132
Ref: CL-SELENIUM:COOKIE class14563
Ref: CL-SELENIUM:COOKIE function15837
Ref: CL-SELENIUM:DELETE-ALL-COOKIES function16141
Ref: CL-SELENIUM:DELETE-COOKIE function16320
Ref: CL-SELENIUM:FIND-COOKIE function16522
Ref: CL-SELENIUM:DISMISS-ALERT function16754
Ref: CL-SELENIUM:ACCEPT-ALERT function16923
Ref: CL-SELENIUM:ALERT-TEXT function17093
Ref: CL-SELENIUM:ELEMENT-SEND-KEYS function17302
Ref: CL-SELENIUM:ELEMENT-CLEAR function17762
Ref: CL-SELENIUM:ELEMENT-CLICK function18003
Ref: CL-SELENIUM:MAKE-COOKIE function18556
Ref: CL-SELENIUM:EXECUTE-SCRIPT function18720
Node: CL-SELENIUM-UTILS package19785
Ref: CL-SELENIUM-UTILS:*TIMEOUT* variable20106
Ref: CL-SELENIUM-UTILS:*DEFAULT-ELEMENT-FUNC* variable20204
Ref: CL-SELENIUM-UTILS:ID function20503
Ref: CL-SELENIUM-UTILS:GET-COOKIE function20580
Ref: CL-SELENIUM-UTILS:FIND-ELEM function20664
Ref: CL-SELENIUM-UTILS:WAIT-FOR function20807
Ref: CL-SELENIUM-UTILS:CLASSNAME function21018
Ref: CL-SELENIUM-UTILS:TEXT function21109
Ref: CL-SELENIUM-UTILS:SEND-KEY function21192
Ref: CL-SELENIUM-UTILS:CLASSLIST function21286
Ref: CL-SELENIUM-UTILS:ATTR function21378
Ref: CL-SELENIUM-UTILS:SEND-KEYS function21470
Ref: CL-SELENIUM-UTILS:ELEM function21565
Ref: CL-SELENIUM-UTILS:CLICK function21862
Node: Index21961

End Tag Table
