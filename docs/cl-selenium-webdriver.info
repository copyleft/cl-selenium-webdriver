This is cl-webdriver-client.info, produced by makeinfo version 6.7
from cl-webdriver-client.weaved.texi.

INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* cl-webdriver-client: (cl-webdriver-client)Common Lisp Selenium Webdriver.
END-INFO-DIR-ENTRY


File: cl-webdriver-client.info,  Node: Top,  Next: Introduction,  Up: (dir)

Top
***

CL Selenium WebDriver is a binding library to the Selenium 4.0 that
implements the W3C Webdriver spec (https://www.w3.org/TR/webdriver).

* Menu:

* Introduction::
* Usage::
* Installation::
* Utils::
* API::
* Index::


File: cl-webdriver-client.info,  Node: Introduction,  Next: Usage,  Prev: Top,  Up: Top

1 Introduction
**************

CL Selenium WebDriver is a binding library to the Selenium 4.0 that
implements the W3C Webdriver spec (https://www.w3.org/TR/webdriver).

   This software is in development.  The APIs will be likely to change.


File: cl-webdriver-client.info,  Node: Usage,  Next: Installation,  Prev: Introduction,  Up: Top

2 Usage
*******

* Menu:

* Actions::

     ;; see examples/*.lisp and t/*.lisp
     (in-package :cl-user)

     (eval-when (:compile-toplevel :load-toplevel :execute)
       (ql:quickload :cl-selenium))

     (defpackage go-test
       (:use :cl :cl-selenium))

     (in-package :go-test)

     (defparameter *code* "
     package main
     import \"fmt\"

     func main() {
         fmt.Print(\"Hello WebDriver!\")
     }")

     (with-session ()
       (setf (url) "http://play.golang.org/?simple=1")
       (let ((elem (find-element "#code" :by :css-selector)))
         (element-clear elem)
         (element-send-keys elem *code*))
       (let ((btn (find-element "#run")))
         (element-click btn))

       (loop
          with div = (find-element "#output")
          for ouput = (element-text div)
          while (equal ouput "Waiting for remote server...")
          do (sleep 0.1)
          finally (print ouput)))


File: cl-webdriver-client.info,  Node: Actions,  Up: Usage

2.1 Actions
===========

_cl-selenium_ implements a little language for performing actions.

   The Actions API provides a low-level interface for providing
virtualised device input to the web browser.  Conceptually, the Actions
commands divide time into a series of ticks.  The local end sends a
series of actions which correspond to the change in state, if any, of
each input device during each tick.  For example, pressing a key is
represented by an action sequence consisting of a single key input
device and two ticks, the first containing a keyDown action, and the
second a keyUp action, whereas a pinch-zoom input is represented by an
action sequence consisting of three ticks and two pointer input devices
of type touch, each performing a sequence of actions pointerDown,
followed by pointerMove, and then pointerUp.

   See <https://www.w3.org/TR/webdriver/#actions> for the whole
explanation.

   To perform actions in _cl-selenium_ use *note PERFORM-ACTIONS:
CL-SELENIUM:PERFORM-ACTIONS function.  That function implements a little
language, with the following syntax:

Syntax:
-------

actions ::= ({actions-input-source}*)
actions-input-source ::= (input-source-type {action}*)
input-source-type ::= :none | :pointer | :mouse | :pen | :touch | :key
action ::= pause | pointer-move | pointer-down | pointer-up | key-down | key-up
pause ::= (:pause duration)
pointer-move ::= (:pointer-move x y)
pointer-down ::= (:pointer-down button-number)
pointer-up ::= (:pointer-up button-number)
key-down ::= (:key-down key)
key-up ::= (:key-up key)

Arguments and values:
---------------------

   * _actions_--a list of actions-input-sources.  One list for each type
     of input source that wants to be used.
   * _actions-input-source_--a list.  Specifies the list of actions to
     perform for a particular input source.
   * _duration_--an integer.  The time to pause in milliseconds.
   * _key_--a string.  A string with the character (e.g.  "a").  Use
     *note KEY: CL-SELENIUM:KEY function. for entering special
     characters.
   * _button_- an integer greater than or equal to 0.

Examples:
---------

     (perform-actions `((:pen
     		     (:pointer-move 22 33)
     		     (:pause 2000)
     		     (:pointer-move 23 54))))


File: cl-webdriver-client.info,  Node: Installation,  Next: Utils,  Prev: Usage,  Up: Top

3 Installation
**************

     git clone https://github.com/TatriX/cl-webdriver-client ~/quicklisp/local-projects/
     (ql:quickload :cl-selenium)

   You need a running instance of selenium-server-standalone.

   [Download](http://www.seleniumhq.org/download/) it and run:

     curl -L0 https://goo.gl/SP94ZB -o selenium-server-standalone.jar
     java -jar selenium-server-standalone.jar


File: cl-webdriver-client.info,  Node: Utils,  Next: API,  Prev: Installation,  Up: Top

4 Utils
*******

There is a ':cl-selenium-utils' package which should reduce boilerplate.
For example:

     (defpackage my-test
       (:use :cl :cl-selenium)
       (:import-from :cl-selenium-utils
                     :send-keys
                     :click
                     :wait-for
                     :classlist))

     (in-package :my-test)

     (with-session ()
       (setf (url) "http://google.com")
       (send-keys "cl-webdriver-client")
       (click "[name=btnK]")
       (wait-for "#resultStats"))


* Menu:

* Interactive session::
* Utils API conventions::
* Waiting for the reaction::
* Running tests::


File: cl-webdriver-client.info,  Node: Interactive session,  Next: Utils API conventions,  Up: Utils

4.1 Interactive session
=======================

You can just start the session and control it from your repl:

     (in-package :my-test)

     (start-interactive-session)

     (setf (url) "http://google.com")
     (send-keys "cl-webdriver-client")
     (send-keys (key :enter))
     (classlist "#slim_appbar") ; prints ("ab_tnav_wrp")

     (stop-interactive-session)


File: cl-webdriver-client.info,  Node: Utils API conventions,  Next: Waiting for the reaction,  Prev: Interactive session,  Up: Utils

4.2 Utils API conventions
=========================

If utility function needs an element to work on it defaults to
'(active-element)'.
     (click) ; click on the current active element.

   You can also pass a css selector as a last parameter.

     (print (id "#submit")) ; print id the of matched element

     (assert (= (first (classlist "div")) "first-div-ever"))

   To change default element you can:

     (setf cl-selenium-utils:*default-element-func* (lambda () (find-element "input[type=submit]"))


File: cl-webdriver-client.info,  Node: Waiting for the reaction,  Next: Running tests,  Prev: Utils API conventions,  Up: Utils

4.3 Waiting for the reaction
============================

Often you need to wait for some action to be done.  For example if you
do a '(click)' on the button to load search results, you need to wait
them to load.

     (wait-for ".search-result" :timeout 10) ; wait 10 seconds

   Timeout defaults to 30 seconds.  You can globally change it:
     (setf cl-selenium-utils:*timeout* 3)


File: cl-webdriver-client.info,  Node: Running tests,  Prev: Waiting for the reaction,  Up: Utils

4.4 Running tests
=================

REPL
====

     (ql:quickload '(:cl-selenium :prove))
     (setf prove:*enable-colors* nil)
     (prove:run :cl-selenium-test)

Shell
=====

     sh
     ./test.sh


File: cl-webdriver-client.info,  Node: API,  Next: Index,  Prev: Utils,  Up: Top

5 API
*****

* Menu:

* CL-SELENIUM package::
* CL-SELENIUM-UTILS package::


File: cl-webdriver-client.info,  Node: CL-SELENIUM package,  Next: CL-SELENIUM-UTILS package,  Up: API

5.1 CL-SELENIUM package
=======================

 -- PACKAGE: CL-SELENIUM

     This package exports functions for working with Selenium WebDriver.

     For documentation see:
     - <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol>
     - <https://www.w3.org/TR/webdriver1>

External definitions
====================

Session
-------

 -- CL-SELENIUM: USE-SESSION (session)

     Make SESSION the current SESSION.

     Category: SESSION

 -- CL-SELENIUM: MAKE-SESSION (&key (browser-name :chrome)
          browser-version platform-name platform-version
          accept-ssl-certs additional-capabilities)

     Creates a new WebDriver session with the endpoint node.  If the
     creation fails, a session not created error is returned.

     Category: Session
     See: <https://www.w3.org/TR/webdriver1/#new-session> .
     See: <https://www.w3.org/TR/webdriver1/#capabilities> .

 -- CL-SELENIUM: DELETE-SESSION (session)

     Delete the WebDriver SESSION.

     Category: SESSION

 -- CL-SELENIUM: START-INTERACTIVE-SESSION (&rest capabilities)

     Start an interactive session.  Use this to interact with Selenium
     driver from a REPL.

     Category: Session
     See: *note MAKE-SESSION: CL-SELENIUM:MAKE-SESSION function.

 -- CL-SELENIUM: STOP-INTERACTIVE-SESSION nil

     Stop an interactive session.

     Category: Session

 -- CL-SELENIUM: WITH-SESSION ((&rest capabilities) &body body)

     Execute BODY inside a Selenium session.

     Category: Session
     See: *note MAKE-SESSION: CL-SELENIUM:MAKE-SESSION function.

Actions
-------

 -- CL-SELENIUM: PERFORM-ACTIONS (actions &optional (session *session*))

     The ACTIONS API provides a low-level interface for providing
     virtualised device input to the web browser.
     Conceptually, the ACTIONS commands divide time into a series of
     ticks.  The local end sends a series of ACTIONS which correspond to
     the change in state, if any, of each input device during each tick.
     For example, pressing a key is represented by an action sequence
     consisting of a single key input device and two ticks, the first
     containing a keyDown action, and the second a keyUp action, whereas
     a pinch-zoom input is represented by an action sequence consisting
     of three ticks and two pointer input devices of type touch, each
     performing a sequence of ACTIONS pointerDown, followed by
     pointerMove, and then pointerUp.

     Category: ACTIONS
     See: <https://www.w3.org/TR/webdriver/#>ACTIONS

 -- CL-SELENIUM: KEY (key)

     Returns a string with KEY's codepoint.

     Category: Actions
     See: <https://www.w3.org/TR/webdriver/#keyboard-actions>

Uncategorized
-------------

 -- CL-SELENIUM: MOUSE-CLICK (button &key (session *session*))

     Click any mouse BUTTON (at the coordinates set by the last moveto
     command).  Note that calling this command after calling buttondown
     and before calling BUTTON up (or any out-of-order interactions
     sequence) will yield undefined behaviour).

     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidclick>

 -- CL-SELENIUM: SELENIUM-STATUS nil

     Get Selenium Webdriver status information

 -- CL-SELENIUM: MOUSE-MOVE-TO (x y &key element (session *session*))

     Move the mouse by an offset of the specificed ELEMENT.  If no
     ELEMENT is specified, the move is relative to the current mouse
     cursor.  If an ELEMENT is provided but no offset, the mouse will be
     moved to the center of the ELEMENT.  If the ELEMENT is not visible,
     it will be scrolled into view.

     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidmoveto>

 -- CL-SELENIUM: LOGS (type &key (session *session*))

     Return the logs of a particular TYPE.
     See: *note LOG-TYPES: CL-SELENIUM:LOG-TYPES function.

 -- CL-SELENIUM: LOG-TYPES (&key (session *session*))

     Return the types of logs supported by the WebDriver.

     - browser: Javascript console logs from the browser.
     - client: Logs from the client side implementation of the WebDriver
     protocol (e.g.  the Java bindings).
     - driver: Logs from the internals of the driver (e.g.
     FirefoxDriver internals).
     - performance: Logs relating to the performance characteristics of
     the page under test (e.g.  resource load timings).
     - server: Logs from within the selenium server.

     See: <https://github.com/SeleniumHQ/selenium/wiki/Logging> .

 -- CL-SELENIUM: ELEMENT-ID (sb-pcl::object)

 -- CL-SELENIUM: NO-SUCH-ELEMENT-ERROR

     Error signaled when no such element is found.

     Class precedence list: 'no-such-element-error, find-error, error,
     serious-condition, condition, t'

Elements
--------

 -- CL-SELENIUM: FIND-ELEMENT (value &key (by :css-selector) (session
          *session*))

     The Find Element command is used to find an element in the current
     browsing context that can be used as the web element context for
     future element-centric commands.

     For example, consider this pseudo code which retrieves an element
     with the #toremove ID and uses this as the argument for a script it
     injects to remove it from the HTML document:

     let body *note =: COMMON-LISP:= function.
     SESSION.find.css("#toremove");
     SESSION.execute("arguments[0].remove()", [body]);

     The BY parameter represents the element location strategy.

     It can be one of:
     - :ID : Finds element BY id.
     - :CLASS-NAME : Finds element BY class name.
     - :CSS-SELECTOR : Returns element that matches css selector.
     - :LINK-TEXT : Returns element that matches <a> element text.
     - :PARTIAL-LINK-TEXT: Returns element that matches <a> element text
     partially.
     - :TAG-NAME: Returns element that matches tag name.
     - :XPATH: Returns element that matches the XPath expression.

     If result is empty, a *note HANDLE-FIND-ERROR:
     CL-SELENIUM:HANDLE-FIND-ERROR function. is signaled.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#dfn-find-element> .

 -- CL-SELENIUM: ELEMENT-TEXT (element &key (session *session*))

     The Get ELEMENT Text command intends to return an ELEMENT’s text
     “as rendered”.  An ELEMENT’s rendered text is also used for
     locating a elements by their link text and partial link text.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#get-element-text> .

 -- CL-SELENIUM: ELEMENT-TAGNAME (element &key (session *session*))

     Return the ELEMENT's tag name.

     Category: Elements

 -- CL-SELENIUM: ELEMENT-ATTRIBUTE (element name &key (session
          *session*))

     Return the ELEMENT's attribute named NAME.

     Category: Elements

 -- CL-SELENIUM: ELEMENT-RECT (element &key (session *session*))



     The Get ELEMENT Rect command returns the dimensions and coordinates
     of the given web ELEMENT.  The returned value is a dictionary with
     the following members:

     x
     X axis position of the top-left corner of the web ELEMENT relative
     to the current browsing context’s document ELEMENT in CSS pixels.
     y
     Y axis position of the top-left corner of the web ELEMENT relative
     to the current browsing context’s document ELEMENT in CSS pixels.
     height
     Height of the web ELEMENT’s bounding rectangle in CSS pixels.
     width
     Width of the web ELEMENT’s bounding rectangle in CSS pixels.

     Category: Elements

 -- CL-SELENIUM: ELEMENT-DISPLAYED (element &key (session *session*))

     Returns if ELEMENT is visible.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#element-displayedness> .

 -- CL-SELENIUM: FIND-ELEMENTS (value &key (by :css-selector) (session
          *session*))

     Find elements that match VALUE using location strategy in BY.

     Category: Elements
     See *note FIND-ELEMENT: CL-SELENIUM:FIND-ELEMENT function.
     See <https://www.w3.org/TR/webdriver1/#find-elements> .

 -- CL-SELENIUM: ACTIVE-ELEMENT (&key (session *session*))

     Return the active element of the current browsing context’s
     document.
     The active element is the Element within the DOM that currently has
     focus.
     If there's no active element, an error is signaled.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver2/#get-active-element.>
     See:
     <https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement.>

 -- CL-SELENIUM: ELEMENT-ENABLED (element &key (session *session*))

     Returns if ELEMENT is enabled.

     Category: Elements
     See: <https://www.w3.org/TR/webdriver1/#is-element-enabled> .

Element interaction
-------------------

 -- CL-SELENIUM: ELEMENT-SEND-KEYS (element keys &key (session
          *session*))

     The ELEMENT Send KEYS command scrolls into view the form control
     ELEMENT and then sends the provided KEYS to the ELEMENT.  In case
     the ELEMENT is not keyboard-interactable, an ELEMENT not
     interactable error is returned.

     KEYS should be a string.

     Category: ELEMENT interaction
     See: <https://www.w3.org/TR/webdriver1/#element-send-keys> .

 -- CL-SELENIUM: ELEMENT-CLEAR (element &key (session *session*))

     Clear the contents of ELEMENT (for example, a form field ELEMENT).

     Category: ELEMENT interaction
     See: <https://www.w3.org/TR/webdriver1/#dfn-element-clear.>

 -- CL-SELENIUM: ELEMENT-CLICK (element &key (session *session*))

     The ELEMENT Click command scrolls into view the ELEMENT if it is
     not already pointer-interactable, and clicks its in-view center
     point.

     If the ELEMENT’s center point is obscured by another ELEMENT, an
     ELEMENT click intercepted error is returned.  If the ELEMENT is
     outside the viewport, an ELEMENT not interactable error is
     returned.

     Category: ELEMENT interaction
     See: <https://www.w3.org/TR/webdriver1/#element-click> .

Windows
-------

 -- CL-SELENIUM: CLOSE-CURRENT-WINDOW (&key (session *session*))

     Close the current window.

     Category: Windows

Navigation
----------

 -- CL-SELENIUM: URL (&key (session *session*))

     Get the current url in SESSION.

     Category: Navigation
     See: <https://www.w3.org/TR/webdriver1/#dfn-get-current-url> .

 -- CL-SELENIUM: SWITCH-TO-FRAME (id &key (session *session*))

     Change focus to another frame on the page.  If the frame ID is
     null, the server
     should switch to the page's default content.

     In the context of a web browser, a frame is a part of a web page or
     browser window which displays content independent of its container,
     with the ability to load content independently.

     Category: Navigation
     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidframe>
     .
     See: <https://en.wikipedia.org/wiki/Frame_(World_Wide_Web)> .

 -- CL-SELENIUM: PAGE-TITLE (&key (session *session*))

     This command returns the document title of the current top-level
     browsing context, equivalent to calling document.title.

     Category: Navigation
     See: <https://www.w3.org/TR/webdriver2/#get-title> .

 -- CL-SELENIUM: REFRESH (&key (session *session*))

     Refresh the current page.

     Category: Navigation

 -- CL-SELENIUM: BACK (&key (session *session*))

     This command causes the browser to traverse one step backward in
     the joint SESSION history of the current top-level browsing
     context.  This is equivalent to pressing the back button in the
     browser chrome or invoking window.history.back.

     Category: Navigation
     See: <https://www.w3.org/TR/webdriver1/#dfn-back> .

Screen capture
--------------

 -- CL-SELENIUM: ELEMENT-SCREENSHOT (element &key (session *session*))

     The Take ELEMENT Screenshot command takes a screenshot of the
     visible region encompassed by the bounding rectangle of an ELEMENT.
     If given a parameter argument scroll that evaluates to false, the
     ELEMENT will not be scrolled into view.

     Category: Screen capture
     See: <https://www.w3.org/TR/webdriver1/#take-element-screenshot> .

 -- CL-SELENIUM: SCREENSHOT (&key (session *session*))

     Screenshots are a mechanism for providing additional visual
     diagnostic information.  They work by dumping a snapshot of the
     initial viewport’s framebuffer as a lossless PNG image.  It is
     returned to the local end as a Base64 encoded string.

     Category: Screen capture
     See: <https://www.w3.org/TR/webdriver2/#screen-capture> .

Cookies
-------

 -- CL-SELENIUM: COOKIE

     A cookie is described in [RFC6265] by a name-value pair holding the
     cookie’s data, followed by zero or more attribute-value pairs
     describing its characteristics.

     Category: Cookies

     Class precedence list: 'cookie, standard-object, t'

     Slots:
        * 'name' -- initarg: ':name'

          The name of the cookie
        * 'value' -- initarg: ':value'

          The cookie value
        * 'path' -- initarg: ':path'

          The cookie path.  Defaults to '/' if omitted when adding a
          cookie.
        * 'domain' -- initarg: ':domain'

          The domain the cookie is visible to.  Defaults to the current
          browsing context’s active document’s URL domain if omitted
          when adding a cookie.
        * 'secure' -- initarg: ':secure'

          Whether the cookie is a secure cookie.  Defaults to false if
          omitted when adding a cookie.
        * 'http-only' -- initarg: ':http-only'

          Whether the cookie is an HTTP only cookie.  Defaults to false
          if omitted when adding a cookie.
        * 'expiry' -- initarg: ':expiry'

          When the cookie expires, specified in seconds since Unix
          Epoch.  Must not be set if omitted when adding a cookie.

 -- CL-SELENIUM: COOKIE (&key (session *session*))

     Retrieve all cookies visible to the current page.

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#get-all-cookies> .
     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidcookie>
     .

 -- CL-SELENIUM: DELETE-ALL-COOKIES (&key (session *session*))

     Deletes all cookies

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#delete-all-cookies>

 -- CL-SELENIUM: MAKE-COOKIE (name value &key path domain secure expiry)

     Create a cookie object.

     Category: Cookies

 -- CL-SELENIUM: DELETE-COOKIE (cookie-name &key (session *session*))

     Delete the cookie with name COOKIE-NAME.

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#delete-cookie>

 -- CL-SELENIUM: FIND-COOKIE (cookie-name &key (session *session*))

     Retrieve the cookie with name COOKIE-NAME.

     Category: Cookies
     See: <https://www.w3.org/TR/webdriver1/#get-named-cookie>

User prompts
------------

 -- CL-SELENIUM: DISMISS-ALERT (&key (session *session*))

     The Dismiss Alert command dismisses a simple dialog if present.  A
     request to dismiss an alert user prompt, which may not necessarily
     have a dismiss button, has the same effect as accepting it.

     Category: User prompts
     See: <https://www.w3.org/TR/webdriver1/#dismiss-alert>

 -- CL-SELENIUM: ACCEPT-ALERT (&key (session *session*))

     Accept Alert.

     Category: User prompts
     See: <https://www.w3.org/TR/webdriver1/#dfn-accept-alert>

 -- CL-SELENIUM: ALERT-TEXT (&key (session *session*))

     Get Alert Text.

     Category: User prompts
     See: <https://www.w3.org/TR/webdriver1/#get-alert-text>

Document handling
-----------------

 -- CL-SELENIUM: EXECUTE-SCRIPT (script args &key (session *session*))

     Inject a snippet of JavaScript into the page for execution in the
     context of the currently selected frame.  The executed SCRIPT is
     assumed to be synchronous and the result of evaluating the SCRIPT
     is returned to the client.

     The SCRIPT argument defines the SCRIPT to execute in the form of a
     function body.  The value returned by that function will be
     returned to the client.  The function will be invoked with the
     provided ARGS array and the values may be accessed via the
     arguments object in the order specified.

     Arguments may be any JSON-primitive, array, or JSON object.  JSON
     objects that define a WebElement reference will be converted to the
     corresponding DOM element.  Likewise, any WebElements in the SCRIPT
     result will be returned to the client as WebElement JSON objects.

     Category: Document handling
     See:
     <https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidexecute>
     .


File: cl-webdriver-client.info,  Node: CL-SELENIUM-UTILS package,  Prev: CL-SELENIUM package,  Up: API

5.2 CL-SELENIUM-UTILS package
=============================

 -- PACKAGE: CL-SELENIUM-UTILS

     Package with the purpose of reducing boilerplate.

External definitions
====================

Variables
---------

 -- CL-SELENIUM-UTILS: *TIMEOUT*

     Default timeout value to use in selenium-utils functions.

 -- CL-SELENIUM-UTILS: *DEFAULT-ELEMENT-FUNC*

     Function used to get the 'default element' by selenium-utils
     functions.
     It is *note ACTIVE-ELEMENT: CL-SELENIUM:ACTIVE-ELEMENT function.
     function by default.

Functions
---------

 -- CL-SELENIUM-UTILS: ID (&optional selector)

     Get active element id.

 -- CL-SELENIUM-UTILS: GET-COOKIE (cookie name)

     Get value of COOKIE at NAME.

 -- CL-SELENIUM-UTILS: FIND-ELEM (selector &key (by :css-selector))

     Find element BY SELECTOR.  Returns NIL if the element is not found.

 -- CL-SELENIUM-UTILS: WAIT-FOR (selector &key (timeout *timeout*))

     Wait for an element that matches SELECTOR to appear on the screen.
     TIMEOUT indicates how much time to wait (default is *TIMEOUT*).

 -- CL-SELENIUM-UTILS: CLASSNAME (&optional selector)

     Get active element classname.

 -- CL-SELENIUM-UTILS: TEXT (&optional selector)

     Get active element's text.

 -- CL-SELENIUM-UTILS: SEND-KEY (key &optional selector)

     Send a KEY to active element.

 -- CL-SELENIUM-UTILS: CLASSLIST (&optional selector)

     Get active element class list.

 -- CL-SELENIUM-UTILS: ATTR (name &optional selector)

     Get acttive element attribute.

 -- CL-SELENIUM-UTILS: SEND-KEYS (keys &optional selector)

     Send KEYS to active element.

 -- CL-SELENIUM-UTILS: ELEM (&optional selector)

     If SELECTOR is given, wait for an element that matches the SELECTOR
     to appear.
     Otherwise, call *note *DEFAULT-ELEMENT-FUNC*:
     CL-SELENIUM-UTILS:*DEFAULT-ELEMENT-FUNC* variable. (the active
     element is returned by default).

 -- CL-SELENIUM-UTILS: CLICK (&optional selector)

     Click on active element.


File: cl-webdriver-client.info,  Node: Index,  Prev: API,  Up: Top

6 Index
*******

 [index ]
* Menu:

* cl-webdriver-client:                 Top.                   (line 6)
* cl-webdriver-client <1>:             Top.                   (line 6)

 [index ]
* Menu:

* *DEFAULT-ELEMENT-FUNC*:                CL-SELENIUM-UTILS package.
                                                               (line 20)
* *TIMEOUT*:                             CL-SELENIUM-UTILS package.
                                                               (line 16)
* CL-SELENIUM-UTILS:*DEFAULT-ELEMENT-FUNC*: CL-SELENIUM-UTILS package.
                                                               (line 20)
* CL-SELENIUM-UTILS:*TIMEOUT*:           CL-SELENIUM-UTILS package.
                                                               (line 16)

 [index ]
* Menu:

* ACCEPT-ALERT:                          CL-SELENIUM package. (line 474)
* ACTIVE-ELEMENT:                        CL-SELENIUM package. (line 244)
* ALERT-TEXT:                            CL-SELENIUM package. (line 481)
* ATTR:                                  CL-SELENIUM-UTILS package.
                                                              (line  63)
* BACK:                                  CL-SELENIUM package. (line 350)
* CL-SELENIUM-UTILS:ATTR:                CL-SELENIUM-UTILS package.
                                                              (line  63)
* CL-SELENIUM-UTILS:CLASSLIST:           CL-SELENIUM-UTILS package.
                                                              (line  59)
* CL-SELENIUM-UTILS:CLASSNAME:           CL-SELENIUM-UTILS package.
                                                              (line  47)
* CL-SELENIUM-UTILS:CLICK:               CL-SELENIUM-UTILS package.
                                                              (line  79)
* CL-SELENIUM-UTILS:ELEM:                CL-SELENIUM-UTILS package.
                                                              (line  71)
* CL-SELENIUM-UTILS:FIND-ELEM:           CL-SELENIUM-UTILS package.
                                                              (line  38)
* CL-SELENIUM-UTILS:GET-COOKIE:          CL-SELENIUM-UTILS package.
                                                              (line  34)
* CL-SELENIUM-UTILS:ID:                  CL-SELENIUM-UTILS package.
                                                              (line  30)
* CL-SELENIUM-UTILS:SEND-KEY:            CL-SELENIUM-UTILS package.
                                                              (line  55)
* CL-SELENIUM-UTILS:SEND-KEYS:           CL-SELENIUM-UTILS package.
                                                              (line  67)
* CL-SELENIUM-UTILS:TEXT:                CL-SELENIUM-UTILS package.
                                                              (line  51)
* CL-SELENIUM-UTILS:WAIT-FOR:            CL-SELENIUM-UTILS package.
                                                              (line  42)
* CL-SELENIUM:ACCEPT-ALERT:              CL-SELENIUM package. (line 474)
* CL-SELENIUM:ACTIVE-ELEMENT:            CL-SELENIUM package. (line 244)
* CL-SELENIUM:ALERT-TEXT:                CL-SELENIUM package. (line 481)
* CL-SELENIUM:BACK:                      CL-SELENIUM package. (line 350)
* CL-SELENIUM:CLOSE-CURRENT-WINDOW:      CL-SELENIUM package. (line 304)
* CL-SELENIUM:COOKIE:                    CL-SELENIUM package. (line 425)
* CL-SELENIUM:DELETE-ALL-COOKIES:        CL-SELENIUM package. (line 435)
* CL-SELENIUM:DELETE-COOKIE:             CL-SELENIUM package. (line 448)
* CL-SELENIUM:DELETE-SESSION:            CL-SELENIUM package. (line  37)
* CL-SELENIUM:DISMISS-ALERT:             CL-SELENIUM package. (line 465)
* CL-SELENIUM:ELEMENT-ATTRIBUTE:         CL-SELENIUM package. (line 200)
* CL-SELENIUM:ELEMENT-CLEAR:             CL-SELENIUM package. (line 280)
* CL-SELENIUM:ELEMENT-CLICK:             CL-SELENIUM package. (line 287)
* CL-SELENIUM:ELEMENT-DISPLAYED:         CL-SELENIUM package. (line 228)
* CL-SELENIUM:ELEMENT-ENABLED:           CL-SELENIUM package. (line 257)
* CL-SELENIUM:ELEMENT-ID:                CL-SELENIUM package. (line 140)
* CL-SELENIUM:ELEMENT-RECT:              CL-SELENIUM package. (line 207)
* CL-SELENIUM:ELEMENT-SCREENSHOT:        CL-SELENIUM package. (line 363)
* CL-SELENIUM:ELEMENT-SEND-KEYS:         CL-SELENIUM package. (line 267)
* CL-SELENIUM:ELEMENT-TAGNAME:           CL-SELENIUM package. (line 194)
* CL-SELENIUM:ELEMENT-TEXT:              CL-SELENIUM package. (line 185)
* CL-SELENIUM:EXECUTE-SCRIPT:            CL-SELENIUM package. (line 491)
* CL-SELENIUM:FIND-COOKIE:               CL-SELENIUM package. (line 455)
* CL-SELENIUM:FIND-ELEMENT:              CL-SELENIUM package. (line 152)
* CL-SELENIUM:FIND-ELEMENTS:             CL-SELENIUM package. (line 235)
* CL-SELENIUM:KEY:                       CL-SELENIUM package. (line  85)
* CL-SELENIUM:LOG-TYPES:                 CL-SELENIUM package. (line 125)
* CL-SELENIUM:LOGS:                      CL-SELENIUM package. (line 120)
* CL-SELENIUM:MAKE-COOKIE:               CL-SELENIUM package. (line 442)
* CL-SELENIUM:MAKE-SESSION:              CL-SELENIUM package. (line  26)
* CL-SELENIUM:MOUSE-CLICK:               CL-SELENIUM package. (line  95)
* CL-SELENIUM:MOUSE-MOVE-TO:             CL-SELENIUM package. (line 109)
* CL-SELENIUM:PAGE-TITLE:                CL-SELENIUM package. (line 336)
* CL-SELENIUM:PERFORM-ACTIONS:           CL-SELENIUM package. (line  67)
* CL-SELENIUM:REFRESH:                   CL-SELENIUM package. (line 344)
* CL-SELENIUM:SCREENSHOT:                CL-SELENIUM package. (line 373)
* CL-SELENIUM:SELENIUM-STATUS:           CL-SELENIUM package. (line 105)
* CL-SELENIUM:START-INTERACTIVE-SESSION: CL-SELENIUM package. (line  43)
* CL-SELENIUM:STOP-INTERACTIVE-SESSION:  CL-SELENIUM package. (line  51)
* CL-SELENIUM:SWITCH-TO-FRAME:           CL-SELENIUM package. (line 320)
* CL-SELENIUM:URL:                       CL-SELENIUM package. (line 313)
* CL-SELENIUM:USE-SESSION:               CL-SELENIUM package. (line  20)
* CL-SELENIUM:WITH-SESSION:              CL-SELENIUM package. (line  57)
* CLASSLIST:                             CL-SELENIUM-UTILS package.
                                                              (line  59)
* CLASSNAME:                             CL-SELENIUM-UTILS package.
                                                              (line  47)
* CLICK:                                 CL-SELENIUM-UTILS package.
                                                              (line  79)
* CLOSE-CURRENT-WINDOW:                  CL-SELENIUM package. (line 304)
* COOKIE:                                CL-SELENIUM package. (line 425)
* DELETE-ALL-COOKIES:                    CL-SELENIUM package. (line 435)
* DELETE-COOKIE:                         CL-SELENIUM package. (line 448)
* DELETE-SESSION:                        CL-SELENIUM package. (line  37)
* DISMISS-ALERT:                         CL-SELENIUM package. (line 465)
* ELEM:                                  CL-SELENIUM-UTILS package.
                                                              (line  71)
* ELEMENT-ATTRIBUTE:                     CL-SELENIUM package. (line 200)
* ELEMENT-CLEAR:                         CL-SELENIUM package. (line 280)
* ELEMENT-CLICK:                         CL-SELENIUM package. (line 287)
* ELEMENT-DISPLAYED:                     CL-SELENIUM package. (line 228)
* ELEMENT-ENABLED:                       CL-SELENIUM package. (line 257)
* ELEMENT-ID:                            CL-SELENIUM package. (line 140)
* ELEMENT-RECT:                          CL-SELENIUM package. (line 207)
* ELEMENT-SCREENSHOT:                    CL-SELENIUM package. (line 363)
* ELEMENT-SEND-KEYS:                     CL-SELENIUM package. (line 267)
* ELEMENT-TAGNAME:                       CL-SELENIUM package. (line 194)
* ELEMENT-TEXT:                          CL-SELENIUM package. (line 185)
* EXECUTE-SCRIPT:                        CL-SELENIUM package. (line 491)
* FIND-COOKIE:                           CL-SELENIUM package. (line 455)
* FIND-ELEM:                             CL-SELENIUM-UTILS package.
                                                              (line  38)
* FIND-ELEMENT:                          CL-SELENIUM package. (line 152)
* FIND-ELEMENTS:                         CL-SELENIUM package. (line 235)
* GET-COOKIE:                            CL-SELENIUM-UTILS package.
                                                              (line  34)
* ID:                                    CL-SELENIUM-UTILS package.
                                                              (line  30)
* KEY:                                   CL-SELENIUM package. (line  85)
* LOG-TYPES:                             CL-SELENIUM package. (line 125)
* LOGS:                                  CL-SELENIUM package. (line 120)
* MAKE-COOKIE:                           CL-SELENIUM package. (line 442)
* MAKE-SESSION:                          CL-SELENIUM package. (line  26)
* MOUSE-CLICK:                           CL-SELENIUM package. (line  95)
* MOUSE-MOVE-TO:                         CL-SELENIUM package. (line 109)
* PAGE-TITLE:                            CL-SELENIUM package. (line 336)
* PERFORM-ACTIONS:                       CL-SELENIUM package. (line  67)
* REFRESH:                               CL-SELENIUM package. (line 344)
* SCREENSHOT:                            CL-SELENIUM package. (line 373)
* SELENIUM-STATUS:                       CL-SELENIUM package. (line 105)
* SEND-KEY:                              CL-SELENIUM-UTILS package.
                                                              (line  55)
* SEND-KEYS:                             CL-SELENIUM-UTILS package.
                                                              (line  67)
* START-INTERACTIVE-SESSION:             CL-SELENIUM package. (line  43)
* STOP-INTERACTIVE-SESSION:              CL-SELENIUM package. (line  51)
* SWITCH-TO-FRAME:                       CL-SELENIUM package. (line 320)
* TEXT:                                  CL-SELENIUM-UTILS package.
                                                              (line  51)
* URL:                                   CL-SELENIUM package. (line 313)
* USE-SESSION:                           CL-SELENIUM package. (line  20)
* WAIT-FOR:                              CL-SELENIUM-UTILS package.
                                                              (line  42)
* WITH-SESSION:                          CL-SELENIUM package. (line  57)



Tag Table:
Node: Top260
Node: Introduction570
Node: Usage905
Node: Actions1940
Node: Installation4251
Node: Utils4746
Node: Interactive session5470
Node: Utils API conventions5950
Node: Waiting for the reaction6601
Node: Running tests7120
Node: API7425
Node: CL-SELENIUM package7588
Ref: CL-SELENIUM:USE-SESSION function8046
Ref: CL-SELENIUM:MAKE-SESSION function8150
Ref: CL-SELENIUM:DELETE-SESSION function8596
Ref: CL-SELENIUM:START-INTERACTIVE-SESSION function8699
Ref: CL-SELENIUM:STOP-INTERACTIVE-SESSION function8950
Ref: CL-SELENIUM:WITH-SESSION macro9056
Ref: CL-SELENIUM:PERFORM-ACTIONS function9273
Ref: CL-SELENIUM:KEY function10212
Ref: CL-SELENIUM:MOUSE-CLICK function10400
Ref: CL-SELENIUM:SELENIUM-STATUS function10825
Ref: CL-SELENIUM:MOUSE-MOVE-TO function10911
Ref: CL-SELENIUM:LOGS function11403
Ref: CL-SELENIUM:LOG-TYPES function11561
Ref: CL-SELENIUM:ELEMENT-ID function12186
Ref: CL-SELENIUM:NO-SUCH-ELEMENT-ERROR class12232
Ref: CL-SELENIUM:FIND-ELEMENT function12453
Ref: CL-SELENIUM:ELEMENT-TEXT function13780
Ref: CL-SELENIUM:ELEMENT-TAGNAME function14147
Ref: CL-SELENIUM:ELEMENT-ATTRIBUTE function14278
Ref: CL-SELENIUM:ELEMENT-RECT function14438
Ref: CL-SELENIUM:ELEMENT-DISPLAYED function15170
Ref: CL-SELENIUM:FIND-ELEMENTS function15373
Ref: CL-SELENIUM:ACTIVE-ELEMENT function15685
Ref: CL-SELENIUM:ELEMENT-ENABLED function16151
Ref: CL-SELENIUM:ELEMENT-SEND-KEYS function16390
Ref: CL-SELENIUM:ELEMENT-CLEAR function16850
Ref: CL-SELENIUM:ELEMENT-CLICK function17091
Ref: CL-SELENIUM:CLOSE-CURRENT-WINDOW function17646
Ref: CL-SELENIUM:URL function17791
Ref: CL-SELENIUM:SWITCH-TO-FRAME function17973
Ref: CL-SELENIUM:PAGE-TITLE function18579
Ref: CL-SELENIUM:REFRESH function18852
Ref: CL-SELENIUM:BACK function18964
Ref: CL-SELENIUM:ELEMENT-SCREENSHOT function19387
Ref: CL-SELENIUM:SCREENSHOT function19819
Ref: CL-SELENIUM:COOKIE class20250
Ref: CL-SELENIUM:COOKIE function21524
Ref: CL-SELENIUM:DELETE-ALL-COOKIES function21828
Ref: CL-SELENIUM:MAKE-COOKIE function22007
Ref: CL-SELENIUM:DELETE-COOKIE function22135
Ref: CL-SELENIUM:FIND-COOKIE function22337
Ref: CL-SELENIUM:DISMISS-ALERT function22569
Ref: CL-SELENIUM:ACCEPT-ALERT function22927
Ref: CL-SELENIUM:ALERT-TEXT function23097
Ref: CL-SELENIUM:EXECUTE-SCRIPT function23302
Node: CL-SELENIUM-UTILS package24367
Ref: CL-SELENIUM-UTILS:*TIMEOUT* variable24688
Ref: CL-SELENIUM-UTILS:*DEFAULT-ELEMENT-FUNC* variable24786
Ref: CL-SELENIUM-UTILS:ID function25033
Ref: CL-SELENIUM-UTILS:GET-COOKIE function25110
Ref: CL-SELENIUM-UTILS:FIND-ELEM function25194
Ref: CL-SELENIUM-UTILS:WAIT-FOR function25337
Ref: CL-SELENIUM-UTILS:CLASSNAME function25548
Ref: CL-SELENIUM-UTILS:TEXT function25639
Ref: CL-SELENIUM-UTILS:SEND-KEY function25722
Ref: CL-SELENIUM-UTILS:CLASSLIST function25816
Ref: CL-SELENIUM-UTILS:ATTR function25908
Ref: CL-SELENIUM-UTILS:SEND-KEYS function26000
Ref: CL-SELENIUM-UTILS:ELEM function26095
Ref: CL-SELENIUM-UTILS:CLICK function26392
Node: Index26474

End Tag Table
