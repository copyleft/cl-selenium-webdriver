This is cl-selenium-webdriver.info, produced by makeinfo version 6.7
from cl-selenium-webdriver.weaved.texi.

INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* cl-selenium-webdriver: (cl-selenium-webdriver)Common Lisp Selenium Webdriver.
END-INFO-DIR-ENTRY


File: cl-selenium-webdriver.info,  Node: Top,  Next: Introduction,  Up: (dir)

Top
***

CL Selenium WebDriver is a binding library to the Selenium 2.0

* Menu:

* Introduction::
* Usage::
* Installation::
* Utils::
* API::
* Index::


File: cl-selenium-webdriver.info,  Node: Introduction,  Next: Usage,  Prev: Top,  Up: Top

1 Introduction
**************

CL Selenium WebDriver is a binding library to the Selenium 2.0

   This software is in development.  The APIs will be likely to change.


File: cl-selenium-webdriver.info,  Node: Usage,  Next: Installation,  Prev: Introduction,  Up: Top

2 Usage
*******

     ;; see examples/*.lisp and t/*.lisp
     (in-package :cl-user)

     (eval-when (:compile-toplevel :load-toplevel :execute)
       (ql:quickload :cl-selenium))

     (defpackage go-test
       (:use :cl :cl-selenium))

     (in-package :go-test)

     (defparameter *code* "
     package main
     import \"fmt\"

     func main() {
         fmt.Print(\"Hello WebDriver!\")
     }")

     (with-session ()
       (setf (url) "http://play.golang.org/?simple=1")
       (let ((elem (find-element "#code" :by :css-selector)))
         (element-clear elem)
         (element-send-keys elem *code*))
       (let ((btn (find-element "#run")))
         (element-click btn))

       (loop
          with div = (find-element "#output")
          for ouput = (element-text div)
          while (equal ouput "Waiting for remote server...")
          do (sleep 0.1)
          finally (print ouput)))


File: cl-selenium-webdriver.info,  Node: Installation,  Next: Utils,  Prev: Usage,  Up: Top

3 Installation
**************

     git clone https://github.com/TatriX/cl-selenium-webdriver ~/quicklisp/local-projects/
     (ql:quickload :cl-selenium)

   You need a running instance of selenium-server-standalone.

   [Download](http://www.seleniumhq.org/download/) it and run:

     curl -L0 https://goo.gl/SP94ZB -o selenium-server-standalone.jar
     java -jar selenium-server-standalone.jar


File: cl-selenium-webdriver.info,  Node: Utils,  Next: API,  Prev: Installation,  Up: Top

4 Utils
*******

There is a ':cl-selenium-utils' package which should reduce boilerplate.
For example:

     (defpackage my-test
       (:use :cl :cl-selenium)
       (:import-from :cl-selenium-utils
                     :send-keys
                     :click
                     :wait-for
                     :classlist))

     (in-package :my-test)

     (with-session ()
       (setf (url) "http://google.com")
       (send-keys "cl-selenium-webdriver")
       (click "[name=btnK]")
       (wait-for "#resultStats"))


* Menu:

* Interactive session::
* Utils API conventions::
* Waiting for the reaction::
* Running tests::


File: cl-selenium-webdriver.info,  Node: Interactive session,  Next: Utils API conventions,  Up: Utils

4.1 Interactive session
=======================

You can just start the session and control it from your repl:

     (in-package :my-test)

     (start-interactive-session)

     (setf (url) "http://google.com")
     (send-keys "cl-selenium-webdriver")
     (send-keys (key :enter))
     (classlist "#slim_appbar") ; prints ("ab_tnav_wrp")

     (stop-interactive-session)


File: cl-selenium-webdriver.info,  Node: Utils API conventions,  Next: Waiting for the reaction,  Prev: Interactive session,  Up: Utils

4.2 Utils API conventions
=========================

If utility function needs an element to work on it defaults to
'(active-element)'.
     (click) ; click on the current active element.

   You can also pass a css selector as a last parameter.

     (print (id "#submit")) ; print id the of matched element

     (assert (= (first (classlist "div")) "first-div-ever"))

   To change default element you can:

     (setf cl-selenium-utils:*default-element-func* (lambda () (find-element "input[type=submit]"))


File: cl-selenium-webdriver.info,  Node: Waiting for the reaction,  Next: Running tests,  Prev: Utils API conventions,  Up: Utils

4.3 Waiting for the reaction
============================

Often you need to wait for some action to be done.  For example if you
do a '(click)' on the button to load search results, you need to wait
them to load.

     (wait-for ".search-result" :timeout 10) ; wait 10 seconds

   Timeout defaults to 30 seconds.  You can globally change it:
     (setf cl-selenium-utils:*timeout* 3)


File: cl-selenium-webdriver.info,  Node: Running tests,  Prev: Waiting for the reaction,  Up: Utils

4.4 Running tests
=================

REPL
====

     (ql:quickload '(:cl-selenium :prove))
     (setf prove:*enable-colors* nil)
     (prove:run :cl-selenium-test)

Shell
=====

     sh
     ./test.sh


File: cl-selenium-webdriver.info,  Node: API,  Next: Index,  Prev: Utils,  Up: Top

5 API
*****

* Menu:

* CL-SELENIUM package::
* CL-SELENIUM-UTILS package::


File: cl-selenium-webdriver.info,  Node: CL-SELENIUM package,  Next: CL-SELENIUM-UTILS package,  Up: API

5.1 CL-SELENIUM package
=======================

 -- PACKAGE: CL-SELENIUM

     This package exports functions for working with Selenium WebDriver.

     For documentation see: -
     https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol -
     https://www.w3.org/TR/webdriver1.

External definitions
====================

Functions
=========

 -- CL-SELENIUM: CLOSE-CURRENT-WINDOW (&key (session *session*))

     Close the current window.

 -- CL-SELENIUM: COOKIE (&key (session *session*))

     Retrieve all cookies visible to the current page.

     See: https://www.w3.org/TR/webdriver1/#get-all-cookies.
     See:
     https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidcookie.

 -- CL-SELENIUM: URL (&key (session *session*))

     Get the current url in SESSION.
     See: https://www.w3.org/TR/webdriver1/#dfn-get-current-url.

 -- CL-SELENIUM: ELEMENT-SEND-KEYS (element keys &key (session
          *session*))

     The ELEMENT Send KEYS command scrolls into view the form control
     ELEMENT and then sends the provided KEYS to the ELEMENT.  In case
     the ELEMENT is not keyboard-interactable, an ELEMENT not
     interactable error is returned.

     See: https://www.w3.org/TR/webdriver1/#element-send-keys.

 -- CL-SELENIUM: ELEMENT-CLICK (element &key (session *session*))

     The ELEMENT Click command scrolls into view the ELEMENT if it is
     not already pointer-interactable, and clicks its in-view center
     point.

     If the ELEMENT’s center point is obscured by another ELEMENT, an
     ELEMENT click intercepted error is returned.  If the ELEMENT is
     outside the viewport, an ELEMENT not interactable error is
     returned.

     See: https://www.w3.org/TR/webdriver1/#element-click.

 -- CL-SELENIUM: LOG-TYPES (&key (session *session*))

     Return the types of logs supported by the WebDriver.

     - browser: Javascript console logs from the browser.
     - client: Logs from the client side implementation of the WebDriver
     protocol (e.g.  the Java bindings).
     - driver: Logs from the internals of the driver (e.g.
     FirefoxDriver internals).
     - performance: Logs relating to the performance characteristics of
     the page under test (e.g.  resource load timings).
     - server: Logs from within the selenium server.

     See: https://github.com/SeleniumHQ/selenium/wiki/Logging.

 -- CL-SELENIUM: FIND-ELEMENTS (value &key (by :css-selector) (session
          *session*))

     Find elements that match VALUE using location strategy in BY.
     See *Note FIND-ELEMENT: CL-SELENIUM:FIND-ELEMENT function.
     See https://www.w3.org/TR/webdriver1/#find-elements.

 -- CL-SELENIUM: MOUSE-MOVE-TO (x y &key element (session *session*))

     Move the mouse by an offset of the specificed ELEMENT.  If no
     ELEMENT is specified, the move is relative to the current mouse
     cursor.  If an ELEMENT is provided but no offset, the mouse will be
     moved to the center of the ELEMENT.  If the ELEMENT is not visible,
     it will be scrolled into view.

     See:
     https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidmoveto

 -- CL-SELENIUM: ELEMENT-ATTRIBUTE (element name &key (session
          *session*))

     Return the ELEMENT's attribute named NAME.

 -- CL-SELENIUM: SWITCH-TO-FRAME (id &key (session *session*))

     Change focus to another frame on the page.  If the frame ID is
     null, the server
     should switch to the page's default content.

     In the context of a web browser, a frame is a part of a web page or
     browser window which displays content independent of its container,
     with the ability to load content independently.

     See:
     https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidframe.
     See: https://en.wikipedia.org/wiki/Frame_(World_Wide_Web).

 -- CL-SELENIUM: EXECUTE-SCRIPT (script args &key (session *session*))

     Inject a snippet of JavaScript into the page for execution in the
     context of the currently selected frame.  The executed SCRIPT is
     assumed to be synchronous and the result of evaluating the SCRIPT
     is returned to the client.

     The SCRIPT argument defines the SCRIPT to execute in the form of a
     function body.  The value returned by that function will be
     returned to the client.  The function will be invoked with the
     provided ARGS array and the values may be accessed via the
     arguments object in the order specified.

     Arguments may be any JSON-primitive, array, or JSON object.  JSON
     objects that define a WebElement reference will be converted to the
     corresponding DOM element.  Likewise, any WebElements in the SCRIPT
     result will be returned to the client as WebElement JSON objects.

     See:
     https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidexecute.

 -- CL-SELENIUM: START-INTERACTIVE-SESSION (&rest capabilities)

     Start an interactive session.  Use this to interact with Selenium
     driver from a REPL.

 -- CL-SELENIUM: SCREENSHOT (&key (session *session*))

     Screenshots are a mechanism for providing additional visual
     diagnostic information.  They work by dumping a snapshot of the
     initial viewport’s framebuffer as a lossless PNG image.  It is
     returned to the local end as a Base64 encoded string.
     See: https://www.w3.org/TR/webdriver2/#screen-capture.

 -- CL-SELENIUM: FIND-ELEMENT (value &key (by :css-selector) (session
          *session*))

     The Find Element command is used to find an element in the current
     browsing context that can be used as the web element context for
     future element-centric commands.

     For example, consider this pseudo code which retrieves an element
     with the #toremove ID and uses this as the argument for a script it
     injects to remove it from the HTML document:

     let body *Note =: COMMON-LISP:= function.
     SESSION.find.css("#toremove");
     SESSION.execute("arguments[0].remove()", [body]);

     The BY parameter represents the element location strategy.

     It can be one of:
     - :ID : Finds element BY id.
     - :CLASS-NAME : Finds element BY class name.
     - :CSS-SELECTOR : Returns element that matches css selector.
     - :LINK-TEXT : Returns element that matches <a> element text.
     - :PARTIAL-LINK-TEXT: Returns element that matches <a> element text
     partially.
     - :TAG-NAME: Returns element that matches tag name.
     - :XPATH: Returns element that matches the XPath expression.

     If result is empty, a *Note HANDLE-FIND-ERROR:
     CL-SELENIUM:HANDLE-FIND-ERROR function. is signaled.

     See: https://www.w3.org/TR/webdriver1/#dfn-find-element.

 -- CL-SELENIUM: MOUSE-CLICK (button &key (session *session*))

     Click any mouse BUTTON (at the coordinates set by the last moveto
     command).  Note that calling this command after calling buttondown
     and before calling BUTTON up (or any out-of-order interactions
     sequence) will yield undefined behaviour).

     See:
     https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidclick

 -- CL-SELENIUM: USE-SESSION (session)

     Make SESSION the current SESSION.

 -- CL-SELENIUM: PAGE-TITLE (&key (session *session*))

     This command returns the document title of the current top-level
     browsing context, equivalent to calling document.title.
     See: https://www.w3.org/TR/webdriver2/#get-title.

 -- CL-SELENIUM: LOGS (type &key (session *session*))

     Return the logs of a particular TYPE.
     See: *Note LOG-TYPES: CL-SELENIUM:LOG-TYPES function.

 -- CL-SELENIUM: ELEMENT-LOCATION (element &key (session *session*))

     Return the ELEMENT's location.

 -- CL-SELENIUM: ELEMENT-TEXT (element &key (session *session*))

     The Get ELEMENT Text command intends to return an ELEMENT’s text
     “as rendered”.  An ELEMENT’s rendered text is also used for
     locating a elements by their link text and partial link text.

     See: https://www.w3.org/TR/webdriver1/#get-element-text.

 -- CL-SELENIUM: ACTIVE-ELEMENT (&key (session *session*))

     Return the active element of the current browsing context’s
     document.
     The active element is the Element within the DOM that currently has
     focus.
     If there's no active element, an error is signaled.

     See: https://www.w3.org/TR/webdriver2/#get-active-element.
     See:
     https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement.

 -- CL-SELENIUM: MAKE-COOKIE (name value &key path domain secure expiry)

 -- CL-SELENIUM: STOP-INTERACTIVE-SESSION nil

     Stop an interactive session.

 -- CL-SELENIUM: ELEMENT-TAGNAME (element &key (session *session*))

     Return the ELEMENT's tag name.

 -- CL-SELENIUM: REFRESH (&key (session *session*))

     Refresh the current page.

 -- CL-SELENIUM: ELEMENT-DISPLAYED (element &key (session *session*))

     Although WebDriver does not define a primitive to ascertain the
     visibility of an ELEMENT in the viewport, we acknowledge that it is
     an important feature for many users.  Here we include a recommended
     approach which will give a simplified approximation of an ELEMENT’s
     visibility, but please note that it relies only on tree-traversal,
     and only covers a subset of visibility checks.

     The visibility of an ELEMENT is guided by what is perceptually
     visible to the human eye.  In this context, an ELEMENT's
     displayedness does not relate to the visibility or display style
     properties.

     The approach recommended to implementors to ascertain an ELEMENT's
     visibility was originally developed by the Selenium project, and is
     based on crude approximations about an ELEMENT's nature and
     relationship in the tree.  An ELEMENT is in general to be
     considered visible if any part of it is drawn on the canvas within
     the boundaries of the viewport.

     The ELEMENT displayed algorithm is a boolean state where true
     signifies that the ELEMENT is displayed and false signifies that
     the ELEMENT is not displayed.  To compute the state on ELEMENT,
     invoke the Call(bot.dom.isShown, null, ELEMENT).  If doing so does
     not produce an error, return the return value from this function
     call.  Otherwise return an error with error code unknown error.

     This function is typically exposed to *Note GET: COMMON-LISP:GET
     function. requests with a URI Template of /session/{session
     id}/element/{element id}/displayed.

     See: https://www.w3.org/TR/webdriver1/#element-displayedness.

 -- CL-SELENIUM: DELETE-SESSION (session)

     Delete the WebDriver SESSION.

 -- CL-SELENIUM: MAKE-SESSION (&key (browser-name :chrome)
          browser-version platform-name platform-version
          accept-ssl-certs additional-capabilities)

     Creates a new WebDriver session with the endpoint node.  If the
     creation fails, a session not created error is returned.

     See: https://www.w3.org/TR/webdriver1/#new-session.
     See: https://www.w3.org/TR/webdriver1/#capabilities.

 -- CL-SELENIUM: KEY (key)

 -- CL-SELENIUM: ELEMENT-CLEAR (element &key (session *session*))

     Clear the contents of ELEMENT (for example, a form field ELEMENT).

     See: https://www.w3.org/TR/webdriver1/#dfn-element-clear.

 -- CL-SELENIUM: BACK (&key (session *session*))

     This command causes the browser to traverse one step backward in
     the joint SESSION history of the current top-level browsing
     context.  This is equivalent to pressing the back button in the
     browser chrome or invoking window.history.back.
     See: https://www.w3.org/TR/webdriver1/#dfn-back.

Classes
=======

 -- CL-SELENIUM: COOKIE

 -- CL-SELENIUM: NO-SUCH-ELEMENT-ERROR

     Error signaled when no such element is found.


File: cl-selenium-webdriver.info,  Node: CL-SELENIUM-UTILS package,  Prev: CL-SELENIUM package,  Up: API

5.2 CL-SELENIUM-UTILS package
=============================

 -- PACKAGE: CL-SELENIUM-UTILS

     Package with the purpose of reducing boilerplate.

External definitions
====================

Variables
=========

 -- CL-SELENIUM-UTILS: *TIMEOUT*

     Default timeout value to use in selenium-utils functions.

 -- CL-SELENIUM-UTILS: *DEFAULT-ELEMENT-FUNC*

     Function used to get the 'default element' by selenium-utils
     functions.
     It is *Note ACTIVE-ELEMENT: CL-SELENIUM:ACTIVE-ELEMENT function.
     function by default.

Functions
=========

 -- CL-SELENIUM-UTILS: ID (&optional selector)

     Get active element id.

 -- CL-SELENIUM-UTILS: GET-COOKIE (cookie name)

     Get value of COOKIE at NAME.

 -- CL-SELENIUM-UTILS: FIND-ELEM (selector &key (by :css-selector))

     Find element BY SELECTOR.  Returns NIL if the element is not found.

 -- CL-SELENIUM-UTILS: WAIT-FOR (selector &key (timeout *timeout*))

     Wait for an element that matches SELECTOR to appear on the screen.
     TIMEOUT indicates how much time to wait (default is *TIMEOUT*).

 -- CL-SELENIUM-UTILS: CLASSNAME (&optional selector)

     Get active element classname.

 -- CL-SELENIUM-UTILS: TEXT (&optional selector)

     Get active element's text.

 -- CL-SELENIUM-UTILS: SEND-KEY (key &optional selector)

     Send a KEY to active element.

 -- CL-SELENIUM-UTILS: CLASSLIST (&optional selector)

     Get active element class list.

 -- CL-SELENIUM-UTILS: ATTR (name &optional selector)

     Get acttive element attribute.

 -- CL-SELENIUM-UTILS: SEND-KEYS (keys &optional selector)

     Send KEYS to active element.

 -- CL-SELENIUM-UTILS: ELEM (&optional selector)

     If SELECTOR is given, wait for an element that matches the SELECTOR
     to appear.
     Otherwise, call *Note *DEFAULT-ELEMENT-FUNC*:
     CL-SELENIUM-UTILS:*DEFAULT-ELEMENT-FUNC* variable. (the active
     element is returned by default).

 -- CL-SELENIUM-UTILS: CLICK (&optional selector)

     Click on active element.


File: cl-selenium-webdriver.info,  Node: Index,  Prev: API,  Up: Top

6 Index
*******

 [index ]
* Menu:

* cl-selenium-webdriver:                 Top.                   (line 6)
* cl-selenium-webdriver <1>:             Top.                   (line 6)

 [index ]
* Menu:

* *DEFAULT-ELEMENT-FUNC*:                CL-SELENIUM-UTILS package.
                                                               (line 20)
* *TIMEOUT*:                             CL-SELENIUM-UTILS package.
                                                               (line 16)
* CL-SELENIUM-UTILS:*DEFAULT-ELEMENT-FUNC*: CL-SELENIUM-UTILS package.
                                                               (line 20)
* CL-SELENIUM-UTILS:*TIMEOUT*:           CL-SELENIUM-UTILS package.
                                                               (line 16)

 [index ]
* Menu:

* ACTIVE-ELEMENT:                        CL-SELENIUM package. (line 215)
* ATTR:                                  CL-SELENIUM-UTILS package.
                                                              (line  63)
* BACK:                                  CL-SELENIUM package. (line 297)
* CL-SELENIUM-UTILS:ATTR:                CL-SELENIUM-UTILS package.
                                                              (line  63)
* CL-SELENIUM-UTILS:CLASSLIST:           CL-SELENIUM-UTILS package.
                                                              (line  59)
* CL-SELENIUM-UTILS:CLASSNAME:           CL-SELENIUM-UTILS package.
                                                              (line  47)
* CL-SELENIUM-UTILS:CLICK:               CL-SELENIUM-UTILS package.
                                                              (line  79)
* CL-SELENIUM-UTILS:ELEM:                CL-SELENIUM-UTILS package.
                                                              (line  71)
* CL-SELENIUM-UTILS:FIND-ELEM:           CL-SELENIUM-UTILS package.
                                                              (line  38)
* CL-SELENIUM-UTILS:GET-COOKIE:          CL-SELENIUM-UTILS package.
                                                              (line  34)
* CL-SELENIUM-UTILS:ID:                  CL-SELENIUM-UTILS package.
                                                              (line  30)
* CL-SELENIUM-UTILS:SEND-KEY:            CL-SELENIUM-UTILS package.
                                                              (line  55)
* CL-SELENIUM-UTILS:SEND-KEYS:           CL-SELENIUM-UTILS package.
                                                              (line  67)
* CL-SELENIUM-UTILS:TEXT:                CL-SELENIUM-UTILS package.
                                                              (line  51)
* CL-SELENIUM-UTILS:WAIT-FOR:            CL-SELENIUM-UTILS package.
                                                              (line  42)
* CL-SELENIUM:ACTIVE-ELEMENT:            CL-SELENIUM package. (line 215)
* CL-SELENIUM:BACK:                      CL-SELENIUM package. (line 297)
* CL-SELENIUM:CLOSE-CURRENT-WINDOW:      CL-SELENIUM package. (line  20)
* CL-SELENIUM:COOKIE:                    CL-SELENIUM package. (line  24)
* CL-SELENIUM:DELETE-SESSION:            CL-SELENIUM package. (line 275)
* CL-SELENIUM:ELEMENT-ATTRIBUTE:         CL-SELENIUM package. (line  93)
* CL-SELENIUM:ELEMENT-CLEAR:             CL-SELENIUM package. (line 291)
* CL-SELENIUM:ELEMENT-CLICK:             CL-SELENIUM package. (line  47)
* CL-SELENIUM:ELEMENT-DISPLAYED:         CL-SELENIUM package. (line 241)
* CL-SELENIUM:ELEMENT-LOCATION:          CL-SELENIUM package. (line 203)
* CL-SELENIUM:ELEMENT-SEND-KEYS:         CL-SELENIUM package. (line  37)
* CL-SELENIUM:ELEMENT-TAGNAME:           CL-SELENIUM package. (line 233)
* CL-SELENIUM:ELEMENT-TEXT:              CL-SELENIUM package. (line 207)
* CL-SELENIUM:EXECUTE-SCRIPT:            CL-SELENIUM package. (line 112)
* CL-SELENIUM:FIND-ELEMENT:              CL-SELENIUM package. (line 146)
* CL-SELENIUM:FIND-ELEMENTS:             CL-SELENIUM package. (line  75)
* CL-SELENIUM:KEY:                       CL-SELENIUM package. (line 289)
* CL-SELENIUM:LOG-TYPES:                 CL-SELENIUM package. (line  60)
* CL-SELENIUM:LOGS:                      CL-SELENIUM package. (line 198)
* CL-SELENIUM:MAKE-COOKIE:               CL-SELENIUM package. (line 227)
* CL-SELENIUM:MAKE-SESSION:              CL-SELENIUM package. (line 279)
* CL-SELENIUM:MOUSE-CLICK:               CL-SELENIUM package. (line 178)
* CL-SELENIUM:MOUSE-MOVE-TO:             CL-SELENIUM package. (line  82)
* CL-SELENIUM:PAGE-TITLE:                CL-SELENIUM package. (line 192)
* CL-SELENIUM:REFRESH:                   CL-SELENIUM package. (line 237)
* CL-SELENIUM:SCREENSHOT:                CL-SELENIUM package. (line 138)
* CL-SELENIUM:START-INTERACTIVE-SESSION: CL-SELENIUM package. (line 133)
* CL-SELENIUM:STOP-INTERACTIVE-SESSION:  CL-SELENIUM package. (line 229)
* CL-SELENIUM:SWITCH-TO-FRAME:           CL-SELENIUM package. (line  98)
* CL-SELENIUM:URL:                       CL-SELENIUM package. (line  32)
* CL-SELENIUM:USE-SESSION:               CL-SELENIUM package. (line 188)
* CLASSLIST:                             CL-SELENIUM-UTILS package.
                                                              (line  59)
* CLASSNAME:                             CL-SELENIUM-UTILS package.
                                                              (line  47)
* CLICK:                                 CL-SELENIUM-UTILS package.
                                                              (line  79)
* CLOSE-CURRENT-WINDOW:                  CL-SELENIUM package. (line  20)
* COOKIE:                                CL-SELENIUM package. (line  24)
* DELETE-SESSION:                        CL-SELENIUM package. (line 275)
* ELEM:                                  CL-SELENIUM-UTILS package.
                                                              (line  71)
* ELEMENT-ATTRIBUTE:                     CL-SELENIUM package. (line  93)
* ELEMENT-CLEAR:                         CL-SELENIUM package. (line 291)
* ELEMENT-CLICK:                         CL-SELENIUM package. (line  47)
* ELEMENT-DISPLAYED:                     CL-SELENIUM package. (line 241)
* ELEMENT-LOCATION:                      CL-SELENIUM package. (line 203)
* ELEMENT-SEND-KEYS:                     CL-SELENIUM package. (line  37)
* ELEMENT-TAGNAME:                       CL-SELENIUM package. (line 233)
* ELEMENT-TEXT:                          CL-SELENIUM package. (line 207)
* EXECUTE-SCRIPT:                        CL-SELENIUM package. (line 112)
* FIND-ELEM:                             CL-SELENIUM-UTILS package.
                                                              (line  38)
* FIND-ELEMENT:                          CL-SELENIUM package. (line 146)
* FIND-ELEMENTS:                         CL-SELENIUM package. (line  75)
* GET-COOKIE:                            CL-SELENIUM-UTILS package.
                                                              (line  34)
* ID:                                    CL-SELENIUM-UTILS package.
                                                              (line  30)
* KEY:                                   CL-SELENIUM package. (line 289)
* LOG-TYPES:                             CL-SELENIUM package. (line  60)
* LOGS:                                  CL-SELENIUM package. (line 198)
* MAKE-COOKIE:                           CL-SELENIUM package. (line 227)
* MAKE-SESSION:                          CL-SELENIUM package. (line 279)
* MOUSE-CLICK:                           CL-SELENIUM package. (line 178)
* MOUSE-MOVE-TO:                         CL-SELENIUM package. (line  82)
* PAGE-TITLE:                            CL-SELENIUM package. (line 192)
* REFRESH:                               CL-SELENIUM package. (line 237)
* SCREENSHOT:                            CL-SELENIUM package. (line 138)
* SEND-KEY:                              CL-SELENIUM-UTILS package.
                                                              (line  55)
* SEND-KEYS:                             CL-SELENIUM-UTILS package.
                                                              (line  67)
* START-INTERACTIVE-SESSION:             CL-SELENIUM package. (line 133)
* STOP-INTERACTIVE-SESSION:              CL-SELENIUM package. (line 229)
* SWITCH-TO-FRAME:                       CL-SELENIUM package. (line  98)
* TEXT:                                  CL-SELENIUM-UTILS package.
                                                              (line  51)
* URL:                                   CL-SELENIUM package. (line  32)
* USE-SESSION:                           CL-SELENIUM package. (line 188)
* WAIT-FOR:                              CL-SELENIUM-UTILS package.
                                                              (line  42)



Tag Table:
Node: Top260
Node: Introduction496
Node: Usage757
Node: Installation1770
Node: Utils2265
Node: Interactive session2989
Node: Utils API conventions3469
Node: Waiting for the reaction4120
Node: Running tests4639
Node: API4944
Node: CL-SELENIUM package5107
Ref: CL-SELENIUM:CLOSE-CURRENT-WINDOW function5566
Ref: CL-SELENIUM:COOKIE function5664
Ref: CL-SELENIUM:URL function5934
Ref: CL-SELENIUM:ELEMENT-SEND-KEYS function6086
Ref: CL-SELENIUM:ELEMENT-CLICK function6477
Ref: CL-SELENIUM:LOG-TYPES function6977
Ref: CL-SELENIUM:FIND-ELEMENTS function7599
Ref: CL-SELENIUM:MOUSE-MOVE-TO function7883
Ref: CL-SELENIUM:ELEMENT-ATTRIBUTE function8373
Ref: CL-SELENIUM:SWITCH-TO-FRAME function8508
Ref: CL-SELENIUM:EXECUTE-SCRIPT function9077
Ref: CL-SELENIUM:START-INTERACTIVE-SESSION function10101
Ref: CL-SELENIUM:SCREENSHOT function10263
Ref: CL-SELENIUM:FIND-ELEMENT function10643
Ref: CL-SELENIUM:MOUSE-CLICK function11943
Ref: CL-SELENIUM:USE-SESSION function12366
Ref: CL-SELENIUM:PAGE-TITLE function12446
Ref: CL-SELENIUM:LOGS function12689
Ref: CL-SELENIUM:ELEMENT-LOCATION function12847
Ref: CL-SELENIUM:ELEMENT-TEXT function12954
Ref: CL-SELENIUM:ACTIVE-ELEMENT function13294
Ref: CL-SELENIUM:MAKE-COOKIE function13732
Ref: CL-SELENIUM:STOP-INTERACTIVE-SESSION function13806
Ref: CL-SELENIUM:ELEMENT-TAGNAME function13888
Ref: CL-SELENIUM:REFRESH function13994
Ref: CL-SELENIUM:ELEMENT-DISPLAYED function14079
Ref: CL-SELENIUM:DELETE-SESSION function15829
Ref: CL-SELENIUM:MAKE-SESSION function15908
Ref: CL-SELENIUM:KEY function16325
Ref: CL-SELENIUM:ELEMENT-CLEAR function16353
Ref: CL-SELENIUM:BACK function16557
Ref: CL-SELENIUM:COOKIE class16936
Ref: CL-SELENIUM:NO-SUCH-ELEMENT-ERROR class16961
Node: CL-SELENIUM-UTILS package17053
Ref: CL-SELENIUM-UTILS:*TIMEOUT* variable17374
Ref: CL-SELENIUM-UTILS:*DEFAULT-ELEMENT-FUNC* variable17472
Ref: CL-SELENIUM-UTILS:ID function17719
Ref: CL-SELENIUM-UTILS:GET-COOKIE function17796
Ref: CL-SELENIUM-UTILS:FIND-ELEM function17880
Ref: CL-SELENIUM-UTILS:WAIT-FOR function18023
Ref: CL-SELENIUM-UTILS:CLASSNAME function18234
Ref: CL-SELENIUM-UTILS:TEXT function18325
Ref: CL-SELENIUM-UTILS:SEND-KEY function18408
Ref: CL-SELENIUM-UTILS:CLASSLIST function18502
Ref: CL-SELENIUM-UTILS:ATTR function18594
Ref: CL-SELENIUM-UTILS:SEND-KEYS function18686
Ref: CL-SELENIUM-UTILS:ELEM function18781
Ref: CL-SELENIUM-UTILS:CLICK function19078
Node: Index19160

End Tag Table
