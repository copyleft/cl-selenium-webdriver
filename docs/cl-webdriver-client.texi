\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@settitle Common Lisp Webdriver Client
@syncodeindex pg cp
@setfilename cl-webdriver-client.info
@comment %**end of header
@include common-lisp.texi

@dircategory Common Lisp
@direntry
* cl-webdriver-client: (cl-webdriver-client)Common Lisp Webdriver Client.
@end direntry

@titlepage
@title Common Lisp Webdriver Client

@author A.U. Thor <@email{bug-sample@@gnu.org}>
@page
@vskip 0pt plus 1filll
@end titlepage

@contents

@node Top
@top Top
@cindex cl-webdriver-client
@cindex cl-webdriver-client

CL Webdriver Client is client library for WebDriver.

WebDriver is a remote control interface that enables introspection and control of user agents. It provides a platform- and language-neutral wire protocol as a way for out-of-process programs to remotely instruct the behavior of web browsers.

Provided is a set of interfaces to discover and manipulate DOM elements in web documents and to control the behavior of a user agent. It is primarily intended to allow web authors to write tests that automate a user agent from a separate controlling process, but may also be used in such a way as to allow in-browser scripts to control a — possibly separate — browser.

See @url{https://www.w3.org/TR/webdriver, W3C Webdriver spec}.

@menu
* Introduction::
* Usage::
* Installation::
* Utils::
* API::
* Index::
@end menu


@node Introduction
@chapter Introduction

CL Webdriver Client is client library for WebDriver.

WebDriver is a remote control interface that enables introspection and control of user agents. It provides a platform- and language-neutral wire protocol as a way for out-of-process programs to remotely instruct the behavior of web browsers.

Provided is a set of interfaces to discover and manipulate DOM elements in web documents and to control the behavior of a user agent. It is primarily intended to allow web authors to write tests that automate a user agent from a separate controlling process, but may also be used in such a way as to allow in-browser scripts to control a — possibly separate — browser.

See @url{https://www.w3.org/TR/webdriver, W3C Webdriver spec}.

@node Usage
@chapter Usage

@menu
* Sessions::
* Capabilities::
* Actions::
@end menu

@lisp
;; see examples/*.lisp and t/*.lisp
(in-package :cl-user)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (ql:quickload :cl-webdriver-client))

(defpackage go-test
  (:use :cl :webdriver-client))

(in-package :go-test)

(defparameter *code* "
package main
import \"fmt\"

func main() @{
    fmt.Print(\"Hello WebDriver!\")
@}")

(with-session ()
  (setf (url) "http://play.golang.org/?simple=1")
  (let ((elem (find-element "#code" :by :css-selector)))
    (element-clear elem)
    (element-send-keys elem *code*))
  (let ((btn (find-element "#run")))
    (element-click btn))

  (loop
     with div = (find-element "#output")
     for ouput = (element-text div)
     while (equal ouput "Waiting for remote server...")
     do (sleep 0.1)
     finally (print ouput)))
@end lisp

@node Sessions
@section Sessions

A session is equivalent to a single instantiation of a particular user agent, including all its child browsers. WebDriver gives each session a unique session ID that can be used to differentiate one session from another, allowing multiple user agents to be controlled from a single HTTP server, and allowing sessions to be routed via a multiplexer (known as an intermediary node).

A WebDriver session represents the connection between a local end and a specific remote end.

A session is started when a New Session is invoked. It is an error to send any commands before starting a session, or to continue to send commands after the session has been closed. Maintaining session continuity between commands to the remote end requires passing a session ID.

A session is torn down at some later point; either explicitly by invoking Delete Session, or implicitly when Close Window is called at the last remaining top-level browsing context.

An intermediary node will maintain an associated session for each active session. This is the session on the upstream neighbor that is created when the intermediary node executes the New Session command. Closing a session on an intermediary node will also close the session of the associated session.

All commands, except New Session and Status, have an associated current session, which is the session in which that command will run.

@node Capabilities
@section Capabilities

WebDriver capabilities are used to communicate the features supported by a session. A client may also use capabilities to define which features it requires the driver to satisfy when creating a new session.

When a WebDriver session is created it returns a set of capabilities describing the negotiated, effective capabilities of the session. Some of the capabilities included in this set are standard and shared between all browsers, but the set may also contain browser-specific capabilities and these are always prefixed.
Capabilities negotiation

Capabilities can be used to require a driver that supports a certain subset of features. This can be used to require certain browser features, such as the ability to resize the window dimensions, but is also used in distributed environments to select a particular browser configuration from a matrix of choices.

Selecting a particular web browser or platform only makes sense when you use a remote WebDriver. In this case the client makes contact with WebDriver through one or more intermediary nodes which negotiates which driver to return to you based on the capabilities it receives.

The capabilities object is a selection mechanism that limits which driver configurations the server will return. If you request a Firefox instance using browserName and Firefox is not installed on the remote, or macOS from a remote that only supports Linux, you may be out of luck. But occasionally you may not care which specific operating system or web browser your session has: you just want a session that has some capability.

The selection process, or the capabilities negotiation, is done through alwaysMatch and firstMatch.

In @emph{CL-WEBDRIVER-CLIENT} capabilities are created using @clref{WEBDRIVER-CLIENT, MAKE-CAPABILITIES, function}. The key argument @var{:always-match} should be the 'alwaysMatch' capabilities as an association list. The key argument @var{:first-match} are the 'firstMatch' capabilities, a list of association lists.

Also, capabilities are constructed from arguments in @clref{WEBDRIVER-CLIENT, MAKE-SESSION, function} and @clref{WEBDRIVER-CLIENT, WITH-SESSION, macro}.

@node alwaysMatch
@subsection alwaysMatch

As the name suggests, capabilities described inside the alwaysMatch capabilities object are features you require the session to have. If the server can not provide what features you require, it will fail.

If for example you ask for Firefox version 62 on a system that only has 60 installed, the session creation will fail:

@lisp
(make-capabilities
   :always-match '((:browser-name . "firefox")
                   (:browser-version . "60")))
@end lisp

or:

@lisp
(with-session '(:always-match ((:browser-name . "firefox")
                               (:browser-version . "60")))
   ... )
@end lisp

@node firstMatch
@subsection firstMatch

The firstMatch field accepts an array of capabilities objects which will be matched in turn until one matches what the server can provide, or it will fail.

This can be useful when you want a driver that runs on macOS or Linux, but not Windows:

@lisp
(make-capabilities
  :first-match (list 
      '((:platform-name . "macos"))
      '((:platform-name . "linux"))))
@end lisp

@node Combining alwaysMatch and firstMatch
@subsection Combining alwaysMatch and firstMatch

firstMatch can of course be combined with alwaysMatch to narrow down the selection. If for example you a driver that runs on macOS or Linux but it has to be Firefox:

@lisp
(make-capabilities
    :always-match '((:browser-name . "firefox"))
    :first-match (list 
      '((:platform-name . "macos"))
      '((:platform-name . "linux"))))
@end lisp

The previous example is exactly equivalent to putting the Firefox requirement in each firstMatch arm:

@lisp
(make-capabilities
    :first-match (list
        '((:browser-name . "firefox") (:platform-name . "macos"))
        '((:browser-name . "firefox") (:platform-name . "linux"))))
@end lisp

Which you choose of the two preceding examples is not important, but it can matter when pass along browser configuration. To avoid unnecessarily repeating data, such as profiles, it is advisable to make use of alwaysMatch so that this data is only transmitted across the wire once:

@lisp
(make-capabilities
   :always-match `((:browser-name . "firefox")
                   ,(firefox-capabilities
                        :profile "<base64 encoded profile>"
                        :args #("--headless")
                        :prefs '(("dom.ipc.processCount" . 8))
                        :log '((:level . "trace"))))
   :first-match (list
       '((:platform-name . "macos"))
       '((:platform-name . "linux"))))
@end lisp

@node List of capabilities
@subsection List of capabilities

@itemize
@item @emph{:browser-name} -- a string. The name of the browser to use. e.g. ``chrome'', ``firefox''.
@item @emph{:browser-version} -- a string. The browser version required.
@item @emph{:platform-name} -- a string. Identifies the operating system of the endpoint node. e.g. 'Linux', 'Windows'.
@item @emph{:accept-insecure-certs} -- a boolean.
    The acceptInsecureCerts capability communicates whether expired or invalid TLS certificates are checked when navigating. If the capability is false, an insecure certificate error will be returned as navigation encounters domains with certificate problems. Otherwise, self-signed or otherwise invalid certificates will be implicitly trusted by the browser on navigation. The capability has effect for the lifetime of the session.
@item @emph{:page-load-strategy} -- a string.
@item @emph{:proxy} -- object. Defines the current session’s @url{https://www.w3.org/TR/webdriver1/#dfn-proxy-configuration, proxy configuration}.
@item @emph{:set-window-rect} -- boolean. Indicates whether the remote end supports all of the commands in @url{https://www.w3.org/TR/webdriver1/#resizing-and-positioning-windows, Resizing and Positioning Windows}. 
@item @emph{:timeouts} -- object. Describes the @url{https://www.w3.org/TR/webdriver1/#dfn-timeouts, timeouts} imposed on certain session operations.
@item @emph{:unhandled-prompt-behaviour} -- string. Describes the current session’s user prompt handler. 
@end itemize

Reference: @url{https://www.w3.org/TR/webdriver1/#capabilities}.

@node Vendor-specific capabilities
@subsection Vendor-specific capabilities

In addition to the standard capabilities WebDriver allows third-parties to extend the set of capabilities to match their needs. Browser vendors and suppliers of drivers typically use extension capabilities to provide configuration to the browser, but they can also be used by intermediaries for arbitrary blobs of information.

You can use @clref{WEBDRIVER-CLIENT, CHROME-CAPABILITIES, function} and @clref{WEBDRIVER-CLIENT, FIREFOX-CAPABILITIES, function} for these.

@node Actions
@section Actions

The Actions API provides a low-level interface for providing virtualised device input to the web browser. Conceptually, the Actions commands divide time into a series of ticks. The local end sends a series of actions which correspond to the change in state, if any, of each input device during each tick. For example, pressing a key is represented by an action sequence consisting of a single key input device and two ticks, the first containing a keyDown action, and the second a keyUp action, whereas a pinch-zoom input is represented by an action sequence consisting of three ticks and two pointer input devices of type touch, each performing a sequence of actions pointerDown, followed by pointerMove, and then pointerUp.

See @url{https://www.w3.org/TR/webdriver/#actions} for the whole explanation.

To perform actions in @emph{cl-webdriver-client} use @clref{WEBDRIVER-CLIENT, PERFORM-ACTIONS, function}. That function implements a little language, with the following syntax:

@subheading Syntax:

@verbatim
actions ::= ({actions-input-source}*)
actions-input-source ::= (input-source-type {action}*)
input-source-type ::= :none | :pointer | :mouse | :pen | :touch | :key
action ::= pause | pointer-move | pointer-down | pointer-up | key-down | key-up
pause ::= (:pause duration)
pointer-move ::= (:pointer-move x y)
pointer-down ::= (:pointer-down button-number)
pointer-up ::= (:pointer-up button-number)
key-down ::= (:key-down key)
key-up ::= (:key-up key)
@end verbatim

@subheading Arguments and values:

@itemize
@item @emph{actions}---a list of actions-input-sources. One list for each type of input source that wants to be used.
@item @emph{actions-input-source}---a list. Specifies the list of actions to perform for a particular input source.
@item @emph{duration}---an integer. The time to pause in milliseconds.
@item @emph{key}---a string. A string with the character (e.g. ``a''). Use @clref{WEBDRIVER-CLIENT, KEY, function} for entering special characters.
@item @emph{button-number}---an integer greater than or equal to 0.
@item @emph{x}---an integer. Horizontal screen coordinate.
@item @emph{y}---an integer. Vertical screen coordinate.
@end itemize

@subheading Examples:

@lisp
(perform-actions `((:pen
		     (:pointer-move 22 33)
		     (:pause 2000)
		     (:pointer-move 23 54))))
@end lisp

@node Installation
@chapter Installation

@example
git clone https://github.com/copyleft/cl-webdriver-client ~/quicklisp/local-projects/
(ql:quickload :cl-webdriver-client)
@end example

You need a running instance of selenium-server-standalone.

[Download](http://www.seleniumhq.org/download/) it and run:

@example
curl -L0 https://goo.gl/SP94ZB -o selenium-server-standalone.jar
java -jar selenium-server-standalone.jar
@end example

@node Utils
@chapter Utils

There is a @code{:webdriver-client-utils} package which should reduce boilerplate. For example:

@lisp
(defpackage my-test
  (:use :cl :webdriver-client)
  (:import-from :webdriver-client-utils
                :send-keys
                :click
                :wait-for
                :classlist))

(in-package :my-test)

(with-session ()
  (setf (url) "http://google.com")
  (send-keys "cl-webdriver-client")
  (click "[name=btnK]")
  (wait-for "#resultStats"))

@end lisp

@node Interactive session
@section Interactive session

You can just start the session and control it from your repl:

@lisp
(in-package :my-test)

(start-interactive-session)

(setf (url) "http://google.com")
(send-keys "cl-webdriver-client")
(send-keys (key :enter))
(classlist "#slim_appbar") ; prints ("ab_tnav_wrp")

(stop-interactive-session)
@end lisp

@node Utils API conventions
@section Utils API conventions

If utility function needs an element to work on it defaults to `(active-element)`.
@lisp
(click) ; click on the current active element.
@end lisp

You can also pass a css selector as a last parameter.

@lisp
(print (id "#submit")) ; print id the of matched element

(assert (= (first (classlist "div")) "first-div-ever"))
@end lisp

To change default element you can:

@lisp
(setf webdriver-client-utils:*default-element-func* (lambda () (find-element "input[type=submit]"))
@end lisp

@node Waiting for the reaction
@section Waiting for the reaction

Often you need to wait for some action to be done. For example if you
do a @code{(click)} on the button to load search results, you need to wait
them to load.

@lisp
(wait-for ".search-result" :timeout 10) ; wait 10 seconds
@end lisp

Timeout defaults to 30 seconds. You can globally change it:
@lisp
(setf webdriver-client-utils:*timeout* 3)
@end lisp

@node Running tests
@section Running tests

@heading REPL

@lisp
(ql:quickload '(:cl-selenium :prove))
(setf prove:*enable-colors* nil)
(prove:run :cl-webdriver-client-test)
@end lisp

@heading Shell

@example
sh
./test.sh
@end example

@node API
@chapter API

@node WEBDRIVER-CLIENT package
@section WEBDRIVER-CLIENT package

(@clpackage :webdriver-client :include-external-definitions t :categorized :by-docstring-category)

@node WEBDRIVER-CLIENT-UTILS package
@section WEBDRIVER-CLIENT-UTILS package

(@clpackage :webdriver-client-utils :include-external-definitions t)

@node Index
@chapter Index

@printindex cp
@printindex vr
@printindex fn

@bye
