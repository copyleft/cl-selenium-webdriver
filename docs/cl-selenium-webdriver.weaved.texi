\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@settitle Common Lisp Selenium Webdriver
@syncodeindex pg cp
@setfilename cl-selenium-webdriver.info
@comment %**end of header
@include common-lisp.texi

@dircategory Common Lisp
@direntry
* cl-selenium-webdriver: (cl-selenium-webdriver)Common Lisp Selenium Webdriver.
@end direntry

@titlepage
@title Common Lisp Selenium Webdriver

@author A.U. Thor <@email{bug-sample@@gnu.org}>
@page
@vskip 0pt plus 1filll
@end titlepage

@contents

@node Top
@top Top
@cindex cl-selenium-webdriver
@cindex cl-selenium-webdriver

CL Selenium WebDriver is a binding library to the Selenium 4.0 that implements the @url{https://www.w3.org/TR/webdriver, W3C Webdriver spec}.

@menu
* Introduction::
* Usage::
* Installation::
* Utils::
* API::
* Index::
@end menu


@node Introduction
@chapter Introduction

CL Selenium WebDriver is a binding library to the Selenium 4.0 that implements the @url{https://www.w3.org/TR/webdriver, W3C Webdriver spec}.

This software is in development. The APIs will be likely to change.

@node Usage
@chapter Usage

@menu
* Actions::
@end menu

@lisp
;; see examples/*.lisp and t/*.lisp
(in-package :cl-user)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (ql:quickload :cl-selenium))

(defpackage go-test
  (:use :cl :cl-selenium))

(in-package :go-test)

(defparameter *code* "
package main
import \"fmt\"

func main() @{
    fmt.Print(\"Hello WebDriver!\")
@}")

(with-session ()
  (setf (url) "http://play.golang.org/?simple=1")
  (let ((elem (find-element "#code" :by :css-selector)))
    (element-clear elem)
    (element-send-keys elem *code*))
  (let ((btn (find-element "#run")))
    (element-click btn))

  (loop
     with div = (find-element "#output")
     for ouput = (element-text div)
     while (equal ouput "Waiting for remote server...")
     do (sleep 0.1)
     finally (print ouput)))
@end lisp

@node Actions
@section Actions

@emph{cl-selenium} implements a little language for performing actions.

The Actions API provides a low-level interface for providing virtualised device input to the web browser. Conceptually, the Actions commands divide time into a series of ticks. The local end sends a series of actions which correspond to the change in state, if any, of each input device during each tick. For example, pressing a key is represented by an action sequence consisting of a single key input device and two ticks, the first containing a keyDown action, and the second a keyUp action, whereas a pinch-zoom input is represented by an action sequence consisting of three ticks and two pointer input devices of type touch, each performing a sequence of actions pointerDown, followed by pointerMove, and then pointerUp.

See @url{https://www.w3.org/TR/webdriver/#actions} for the whole explanation.

To perform actions in @emph{cl-selenium} use @clref{CL-SELENIUM, PERFORM-ACTIONS, function}. That function implements a little language, with the following syntax:

@subheading Syntax:

@verbatim
actions ::= ({actions-input-source}*)
actions-input-source ::= (input-source-type {action}*)
input-source-type ::= :none | :pointer | :mouse | :pen | :touch | :key
action ::= pause | pointer-move | pointer-down | pointer-up | key-down | key-up
pause ::= (:pause duration)
pointer-move ::= (:pointer-move x y)
pointer-down ::= (:pointer-down button-number)
pointer-up ::= (:pointer-up button-number)
key-down ::= (:key-down key)
key-up ::= (:key-up key)
@end verbatim

@subheading Arguments and values:

@itemize
@item @emph{actions}---a list of actions-input-sources. One list for each type of input source that wants to be used.
@item @emph{actions-input-source}---a list. Specifies the list of actions to perform for a particular input source.
@item @emph{duration}---an integer. The time to pause in milliseconds.
@item @emph{key}---a string. A string with the character (e.g. ``a''). Use @clref{CL-SELENIUM, KEY, function} for entering special characters.
@item @emph{button}-- an integer greater than or equal to 0.
@end itemize

@subheading Examples:

@lisp
(perform-actions `((:pen
		     (:pointer-move 22 33)
		     (:pause 2000)
		     (:pointer-move 23 54))))
@end lisp

@node Installation
@chapter Installation

@example
git clone https://github.com/TatriX/cl-selenium-webdriver ~/quicklisp/local-projects/
(ql:quickload :cl-selenium)
@end example

You need a running instance of selenium-server-standalone.

[Download](http://www.seleniumhq.org/download/) it and run:

@example
curl -L0 https://goo.gl/SP94ZB -o selenium-server-standalone.jar
java -jar selenium-server-standalone.jar
@end example

@node Utils
@chapter Utils

There is a @code{:cl-selenium-utils} package which should reduce boilerplate. For example:

@lisp
(defpackage my-test
  (:use :cl :cl-selenium)
  (:import-from :cl-selenium-utils
                :send-keys
                :click
                :wait-for
                :classlist))

(in-package :my-test)

(with-session ()
  (setf (url) "http://google.com")
  (send-keys "cl-selenium-webdriver")
  (click "[name=btnK]")
  (wait-for "#resultStats"))

@end lisp

@node Interactive session
@section Interactive session

You can just start the session and control it from your repl:

@lisp
(in-package :my-test)

(start-interactive-session)

(setf (url) "http://google.com")
(send-keys "cl-selenium-webdriver")
(send-keys (key :enter))
(classlist "#slim_appbar") ; prints ("ab_tnav_wrp")

(stop-interactive-session)
@end lisp

@node Utils API conventions
@section Utils API conventions

If utility function needs an element to work on it defaults to `(active-element)`.
@lisp
(click) ; click on the current active element.
@end lisp

You can also pass a css selector as a last parameter.

@lisp
(print (id "#submit")) ; print id the of matched element

(assert (= (first (classlist "div")) "first-div-ever"))
@end lisp

To change default element you can:

@lisp
(setf cl-selenium-utils:*default-element-func* (lambda () (find-element "input[type=submit]"))
@end lisp

@node Waiting for the reaction
@section Waiting for the reaction

Often you need to wait for some action to be done. For example if you
do a @code{(click)} on the button to load search results, you need to wait
them to load.

@lisp
(wait-for ".search-result" :timeout 10) ; wait 10 seconds
@end lisp

Timeout defaults to 30 seconds. You can globally change it:
@lisp
(setf cl-selenium-utils:*timeout* 3)
@end lisp

@node Running tests
@section Running tests

@heading REPL

@lisp
(ql:quickload '(:cl-selenium :prove))
(setf prove:*enable-colors* nil)
(prove:run :cl-selenium-test)
@end lisp

@heading Shell

@example
sh
./test.sh
@end example

@node API
@chapter API

@node CL-SELENIUM package
@section CL-SELENIUM package

@deftp PACKAGE CL-SELENIUM

This package exports functions for working with Selenium WebDriver.@*
@*
For documentation see:@*
- @url{https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol}@*
- @url{https://www.w3.org/TR/webdriver1}

@end deftp

@heading External definitions

@subheading Session

@cldefun {CL-SELENIUM, USE-SESSION, (session)}

Make @var{SESSION} the current @var{session}.@*
@*
Category: @var{Session}
@endcldefun

@cldefun {CL-SELENIUM, MAKE-SESSION, (&key (browser-name :chrome) browser-version platform-name platform-version accept-ssl-certs additional-capabilities)}

Creates a new WebDriver session with the endpoint node. If the creation fails, a session not created error is returned.@*
@*
Category: Session@*
See: @url{https://www.w3.org/TR/webdriver1/#new-session} .@*
See: @url{https://www.w3.org/TR/webdriver1/#capabilities} .
@endcldefun

@cldefun {CL-SELENIUM, DELETE-SESSION, (session)}

Delete the WebDriver @var{SESSION}.@*
@*
Category: @var{Session}
@endcldefun

@cldefun {CL-SELENIUM, START-INTERACTIVE-SESSION, (&rest capabilities)}

Start an interactive session. Use this to interact with Selenium driver from a REPL.@*
@*
Category: Session@*
See: @clref{CL-SELENIUM, MAKE-SESSION, function}
@endcldefun

@cldefun {CL-SELENIUM, STOP-INTERACTIVE-SESSION, nil}

Stop an interactive session.@*
@*
Category: Session
@endcldefun

@cldefmacro {CL-SELENIUM, WITH-SESSION, ((&rest capabilities) &body body)}

Execute @var{BODY} inside a Selenium session.@*
@*
Category: Session@*
See: @clref{CL-SELENIUM, MAKE-SESSION, function}
@endcldefmacro

@subheading Actions

@cldefun {CL-SELENIUM, PERFORM-ACTIONS, (actions &optional (session *session*))}

The @var{Actions} API provides a low-level interface for providing virtualised device input to the web browser.@*
Conceptually, the @var{Actions} commands divide time into a series of ticks. The local end sends a series of @var{actions} which correspond to the change in state, if any, of each input device during each tick. For example, pressing a key is represented by an action sequence consisting of a single key input device and two ticks, the first containing a keyDown action, and the second a keyUp action, whereas a pinch-zoom input is represented by an action sequence consisting of three ticks and two pointer input devices of type touch, each performing a sequence of @var{actions} pointerDown, followed by pointerMove, and then pointerUp.@*
@*
Category: @var{Actions}@*
See: @url{https://www.w3.org/TR/webdriver/#}@var{actions} 
@endcldefun

@cldefun {CL-SELENIUM, KEY, (key)}

Returns a string with @var{KEY}'s codepoint.@*
@*
Category: Actions@*
See: @url{https://www.w3.org/TR/webdriver/#keyboard-actions}
@endcldefun

@subheading Uncategorized

@cldefun {CL-SELENIUM, MOUSE-CLICK, (button &key (session *session*))}

Click any mouse @var{button} (at the coordinates set by the last moveto command). Note that calling this command after calling buttondown and before calling @var{button} up (or any out-of-order interactions sequence) will yield undefined behaviour).@*
@*
See: @url{https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidclick}
@endcldefun

@cldefun {CL-SELENIUM, SELENIUM-STATUS, nil}

Get Selenium Webdriver status information
@endcldefun

@cldefun {CL-SELENIUM, MOUSE-MOVE-TO, (x y &key element (session *session*))}

Move the mouse by an offset of the specificed @var{element}. If no @var{element} is specified, the move is relative to the current mouse cursor. If an @var{element} is provided but no offset, the mouse will be moved to the center of the @var{element}. If the @var{element} is not visible, it will be scrolled into view.@*
@*
See: @url{https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidmoveto}
@endcldefun

@cldefun {CL-SELENIUM, LOGS, (type &key (session *session*))}

Return the logs of a particular @var{TYPE}.@*
See: @clref{CL-SELENIUM, LOG-TYPES, function}.
@endcldefun

@cldefun {CL-SELENIUM, LOG-TYPES, (&key (session *session*))}

Return the types of logs supported by the WebDriver.@*
@*
- browser: Javascript console logs from the browser.@*
- client: Logs from the client side implementation of the WebDriver protocol (e.g. the Java bindings).@*
- driver: Logs from the internals of the driver (e.g. FirefoxDriver internals).@*
- performance: Logs relating to the performance characteristics of the page under test (e.g. resource load timings).@*
- server: Logs from within the selenium server.@*
@*
See: @url{https://github.com/SeleniumHQ/selenium/wiki/Logging} .
@endcldefun

@cldefgeneric {CL-SELENIUM, ELEMENT-ID, (sb-pcl::object)}


@endcldefgeneric

@cldefclass {CL-SELENIUM, NO-SUCH-ELEMENT-ERROR}

Error signaled when no such element is found.

Class precedence list: @code{no-such-element-error, find-error, error, serious-condition, condition, t}

@endcldefclass

@subheading Elements

@cldefun {CL-SELENIUM, FIND-ELEMENT, (value &key (by :css-selector) (session *session*))}

The Find Element command is used to find an element in the current browsing context that can be used as the web element context for future element-centric commands.@*
@*
For example, consider this pseudo code which retrieves an element with the #toremove ID and uses this as the argument for a script it injects to remove it from the HTML document:@*
@*
let body @clref{COMMON-LISP, =, function} @var{session}.find.css("#toremove");@*
@var{session}.execute("arguments[0].remove()", [body]);@*
@*
The @var{BY} parameter represents the element location strategy.@*
@*
It can be one of:@*
- @var{:id} @var{:} Finds element @var{by} id.@*
- @var{:class-name} @var{:} Finds element @var{by} class name.@*
- @var{:css-selector} @var{:} Returns element that matches css selector.@*
- @var{:link-text} @var{:} Returns element that matches <a> element text.@*
- @var{:partial-link-text:} Returns element that matches <a> element text partially.@*
- @var{:tag-name:} Returns element that matches tag name.@*
- @var{:xpath:} Returns element that matches the XPath expression.@*
@*
If result is empty, a @clref{CL-SELENIUM, HANDLE-FIND-ERROR, function} is signaled.@*
@*
Category: Elements@*
See: @url{https://www.w3.org/TR/webdriver1/#dfn-find-element} .
@endcldefun

@cldefun {CL-SELENIUM, ELEMENT-TEXT, (element &key (session *session*))}

The Get @var{Element} Text command intends to return an @var{element}’s text “as rendered”. An @var{element}’s rendered text is also used for locating a elements by their link text and partial link text.@*
@*
Category: Elements@*
See: @url{https://www.w3.org/TR/webdriver1/#get-element-text} .
@endcldefun

@cldefun {CL-SELENIUM, ELEMENT-TAGNAME, (element &key (session *session*))}

Return the @var{ELEMENT}'s tag name.@*
@*
Category: Elements
@endcldefun

@cldefun {CL-SELENIUM, ELEMENT-ATTRIBUTE, (element name &key (session *session*))}

Return the @var{ELEMENT}'s attribute named @var{NAME}.@*
@*
Category: Elements
@endcldefun

@cldefun {CL-SELENIUM, ELEMENT-RECT, (element &key (session *session*))}

@*
@*
The Get @var{Element} Rect command returns the dimensions and coordinates of the given web @var{element}. The returned value is a dictionary with the following members:@*
@*
x@*
    X axis position of the top-left corner of the web @var{element} relative to the current browsing context’s document @var{element} in CSS pixels.@*
y@*
    Y axis position of the top-left corner of the web @var{element} relative to the current browsing context’s document @var{element} in CSS pixels.@*
height@*
    Height of the web @var{element}’s bounding rectangle in CSS pixels.@*
width@*
    Width of the web @var{element}’s bounding rectangle in CSS pixels.@*
@*
Category: Elements
@endcldefun

@cldefun {CL-SELENIUM, ELEMENT-DISPLAYED, (element &key (session *session*))}

Returns  if @var{ELEMENT} is visible.@*
@*
Category: Elements@*
See: @url{https://www.w3.org/TR/webdriver1/#element-displayedness} .
@endcldefun

@cldefun {CL-SELENIUM, FIND-ELEMENTS, (value &key (by :css-selector) (session *session*))}

Find elements that match @var{VALUE} using location strategy in @var{BY}.@*
@*
Category: Elements@*
See @clref{CL-SELENIUM, FIND-ELEMENT, function}.@*
See @url{https://www.w3.org/TR/webdriver1/#find-elements} .
@endcldefun

@cldefun {CL-SELENIUM, ACTIVE-ELEMENT, (&key (session *session*))}

Return the active element of the current browsing context’s document.@*
The active element is the Element within the DOM that currently has focus.@*
If there's no active element, an error is signaled.@*
@*
Category: Elements@*
See: @url{https://www.w3.org/TR/webdriver2/#get-active-element.}@*
See: @url{https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement.}
@endcldefun

@cldefun {CL-SELENIUM, ELEMENT-ENABLED, (element &key (session *session*))}

Returns  if @var{ELEMENT} is enabled.@*
@*
Category: Elements@*
See: @url{https://www.w3.org/TR/webdriver1/#is-element-enabled} .
@endcldefun

@subheading Element interaction

@cldefun {CL-SELENIUM, ELEMENT-SEND-KEYS, (element keys &key (session *session*))}

The @var{Element} Send @var{Keys} command scrolls into view the form control @var{element} and then sends the provided @var{keys} to the @var{element}. In case the @var{element} is not keyboard-interactable, an @var{element} not interactable error is returned.@*
@*
@var{KEYS} should be a string.@*
@*
Category: @var{Element} interaction@*
See: @url{https://www.w3.org/TR/webdriver1/#element-send-keys} .
@endcldefun

@cldefun {CL-SELENIUM, ELEMENT-CLEAR, (element &key (session *session*))}

Clear the contents of @var{ELEMENT} (for example, a form field @var{element}).@*
@*
Category: @var{Element} interaction@*
See: @url{https://www.w3.org/TR/webdriver1/#dfn-element-clear.}
@endcldefun

@cldefun {CL-SELENIUM, ELEMENT-CLICK, (element &key (session *session*))}

The @var{Element} Click command scrolls into view the @var{element} if it is not already pointer-interactable, and clicks its in-view center point.@*
@*
If the @var{element}’s center point is obscured by another @var{element}, an @var{element} click intercepted error is returned. If the @var{element} is outside the viewport, an @var{element} not interactable error is returned.@*
@*
Category: @var{Element} interaction@*
See: @url{https://www.w3.org/TR/webdriver1/#element-click} .
@endcldefun

@subheading Windows

@cldefun {CL-SELENIUM, CLOSE-CURRENT-WINDOW, (&key (session *session*))}

Close the current window.@*
@*
Category: Windows
@endcldefun

@subheading Navigation

@cldefun {CL-SELENIUM, URL, (&key (session *session*))}

Get the current url in @var{session}.@*
@*
Category: Navigation@*
See: @url{https://www.w3.org/TR/webdriver1/#dfn-get-current-url} .
@endcldefun

@cldefun {CL-SELENIUM, SWITCH-TO-FRAME, (id &key (session *session*))}

Change focus to another frame on the page. If the frame @var{id} is null, the server@*
should switch to the page's default content.@*
@*
In the context of a web browser, a frame is a part of a web page or browser window which displays content independent of its container, with the ability to load content independently.@*
@*
Category: Navigation@*
See: @url{https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidframe} .@*
See: @url{https://en.wikipedia.org/wiki/Frame_(World_Wide_Web)} .
@endcldefun

@cldefun {CL-SELENIUM, PAGE-TITLE, (&key (session *session*))}

This command returns the document title of the current top-level browsing context, equivalent to calling document.title.@*
@*
Category: Navigation@*
See: @url{https://www.w3.org/TR/webdriver2/#get-title} .
@endcldefun

@cldefun {CL-SELENIUM, REFRESH, (&key (session *session*))}

Refresh the current page.@*
@*
Category: Navigation
@endcldefun

@cldefun {CL-SELENIUM, BACK, (&key (session *session*))}

This command causes the browser to traverse one step backward in the joint @var{session} history of the current top-level browsing context. This is equivalent to pressing the back button in the browser chrome or invoking window.history.back.@*
@*
Category: Navigation@*
See: @url{https://www.w3.org/TR/webdriver1/#dfn-back} .
@endcldefun

@subheading Screen capture

@cldefun {CL-SELENIUM, ELEMENT-SCREENSHOT, (element &key (session *session*))}

The Take @var{Element} Screenshot command takes a screenshot of the visible region encompassed by the bounding rectangle of an @var{element}. If given a parameter argument scroll that evaluates to false, the @var{element} will not be scrolled into view.@*
@*
Category: Screen capture@*
See: @url{https://www.w3.org/TR/webdriver1/#take-element-screenshot} .
@endcldefun

@cldefun {CL-SELENIUM, SCREENSHOT, (&key (session *session*))}

Screenshots are a mechanism for providing additional visual diagnostic information. They work by dumping a snapshot of the initial viewport’s framebuffer as a lossless PNG image. It is returned to the local end as a Base64 encoded string.@*
@*
Category: Screen capture@*
See: @url{https://www.w3.org/TR/webdriver2/#screen-capture} .
@endcldefun

@subheading Cookies

@cldefclass {CL-SELENIUM, COOKIE}

A cookie is described in [RFC6265] by a name-value pair holding the cookie’s data, followed by zero or more attribute-value pairs describing its characteristics.@*
@*
Category: Cookies

Class precedence list: @code{cookie, standard-object, t}

Slots:
@itemize
@item @code{name} --- initarg: @code{@w{:name}}

The name of the cookie@item @code{value} --- initarg: @code{@w{:value}}

The cookie value@item @code{path} --- initarg: @code{@w{:path}}

The cookie path. Defaults to '/' if omitted when adding a cookie. @item @code{domain} --- initarg: @code{@w{:domain}}

The domain the cookie is visible to. Defaults to the current browsing context’s active document’s URL domain if omitted when adding a cookie.@item @code{secure} --- initarg: @code{@w{:secure}}

Whether the cookie is a secure cookie. Defaults to false if omitted when adding a cookie.@item @code{http-only} --- initarg: @code{@w{:http-only}}

Whether the cookie is an HTTP only cookie. Defaults to false if omitted when adding a cookie.@item @code{expiry} --- initarg: @code{@w{:expiry}}

When the cookie expires, specified in seconds since Unix Epoch. Must not be set if omitted when adding a cookie.@end itemize

@endcldefclass

@cldefun {CL-SELENIUM, COOKIE, (&key (session *session*))}

Retrieve all cookies visible to the current page.@*
@*
Category: Cookies@*
See: @url{https://www.w3.org/TR/webdriver1/#get-all-cookies} .@*
See: @url{https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidcookie} .
@endcldefun

@cldefun {CL-SELENIUM, DELETE-ALL-COOKIES, (&key (session *session*))}

Deletes all cookies@*
@*
Category: Cookies@*
See: @url{https://www.w3.org/TR/webdriver1/#delete-all-cookies}
@endcldefun

@cldefun {CL-SELENIUM, MAKE-COOKIE, (name value &key path domain secure expiry)}

Create a cookie object.@*
@*
Category: Cookies
@endcldefun

@cldefun {CL-SELENIUM, DELETE-COOKIE, (cookie-name &key (session *session*))}

Delete the cookie with name @var{COOKIE-NAME}.@*
@*
Category: Cookies@*
See: @url{https://www.w3.org/TR/webdriver1/#delete-cookie}
@endcldefun

@cldefun {CL-SELENIUM, FIND-COOKIE, (cookie-name &key (session *session*))}

Retrieve the cookie with name @var{COOKIE-NAME}.@*
@*
Category: Cookies@*
See: @url{https://www.w3.org/TR/webdriver1/#get-named-cookie}
@endcldefun

@subheading User prompts

@cldefun {CL-SELENIUM, DISMISS-ALERT, (&key (session *session*))}

The Dismiss Alert command dismisses a simple dialog if present. A request to dismiss an alert user prompt, which may not necessarily have a dismiss button, has the same effect as accepting it.@*
@*
Category: User prompts@*
See: @url{https://www.w3.org/TR/webdriver1/#dismiss-alert}
@endcldefun

@cldefun {CL-SELENIUM, ACCEPT-ALERT, (&key (session *session*))}

Accept Alert.@*
@*
Category: User prompts@*
See: @url{https://www.w3.org/TR/webdriver1/#dfn-accept-alert}
@endcldefun

@cldefun {CL-SELENIUM, ALERT-TEXT, (&key (session *session*))}

Get Alert Text.@*
@*
Category: User prompts@*
See: @url{https://www.w3.org/TR/webdriver1/#get-alert-text}
@endcldefun

@subheading Document handling

@cldefun {CL-SELENIUM, EXECUTE-SCRIPT, (script args &key (session *session*))}

Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame. The executed @var{script} is assumed to be synchronous and the result of evaluating the @var{script} is returned to the client.@*
@*
The @var{script} argument defines the @var{script} to execute in the form of a function body. The value returned by that function will be returned to the client. The function will be invoked with the provided @var{args} array and the values may be accessed via the arguments object in the order specified.@*
@*
Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement reference will be converted to the corresponding DOM element. Likewise, any WebElements in the @var{script} result will be returned to the client as WebElement JSON objects.@*
@*
Category: Document handling@*
See: @url{https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidexecute} .
@endcldefun



@node CL-SELENIUM-UTILS package
@section CL-SELENIUM-UTILS package

@deftp PACKAGE CL-SELENIUM-UTILS

Package with the purpose of reducing boilerplate.

@end deftp

@heading External definitions

@subheading Variables
@cldefvar {CL-SELENIUM-UTILS, *TIMEOUT*}

Default timeout value to use in selenium-utils functions.
@endcldefvar

@cldefvar {CL-SELENIUM-UTILS, *DEFAULT-ELEMENT-FUNC*}

Function used to get the 'default element' by selenium-utils functions.@*
It is @clref{CL-SELENIUM, ACTIVE-ELEMENT, function} function by default.
@endcldefvar

@subheading Functions
@cldefun {CL-SELENIUM-UTILS, ID, (&optional selector)}

Get active element id.
@endcldefun

@cldefun {CL-SELENIUM-UTILS, GET-COOKIE, (cookie name)}

Get value of @var{COOKIE} at @var{NAME}.
@endcldefun

@cldefun {CL-SELENIUM-UTILS, FIND-ELEM, (selector &key (by :css-selector))}

Find element @var{by} @var{SELECTOR}. Returns NIL if the element is not found.
@endcldefun

@cldefun {CL-SELENIUM-UTILS, WAIT-FOR, (selector &key (timeout *timeout*))}

Wait for an element that matches @var{SELECTOR} to appear on the screen.@*
@var{TIMEOUT} indicates how much time to wait (default is @var{*TIMEOUT*}).
@endcldefun

@cldefun {CL-SELENIUM-UTILS, CLASSNAME, (&optional selector)}

Get active element classname.
@endcldefun

@cldefun {CL-SELENIUM-UTILS, TEXT, (&optional selector)}

Get active element's text.
@endcldefun

@cldefun {CL-SELENIUM-UTILS, SEND-KEY, (key &optional selector)}

Send a @var{key} to active element.
@endcldefun

@cldefun {CL-SELENIUM-UTILS, CLASSLIST, (&optional selector)}

Get active element class list.
@endcldefun

@cldefun {CL-SELENIUM-UTILS, ATTR, (name &optional selector)}

Get acttive element attribute.
@endcldefun

@cldefun {CL-SELENIUM-UTILS, SEND-KEYS, (keys &optional selector)}

Send @var{keys} to active element.
@endcldefun

@cldefun {CL-SELENIUM-UTILS, ELEM, (&optional selector)}

If @var{SELECTOR} is given, wait for an element that matches the @var{selector} to appear.@*
Otherwise, call @clref{CL-SELENIUM-UTILS, *DEFAULT-ELEMENT-FUNC*, variable} (the active element is returned by default).
@endcldefun

@cldefun {CL-SELENIUM-UTILS, CLICK, (&optional selector)}

Click on active element.
@endcldefun



@node Index
@chapter Index

@printindex cp
@printindex vr
@printindex fn

@bye
